{"ast":null,"code":"/**\n * @fileoverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\n\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\nvar Message = require('./Message');\n\n/**\n * Publish and/or subscribe to a topic in ROS.\n *\n * Emits the following events:\n *  * 'warning' - if there are any warning during the Topic creation\n *  * 'message' - the message data from rosbridge\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * name - the topic name, like /cmd_vel\n *   * messageType - the message type, like 'std_msgs/String'\n *   * compression - the type of compression to use, like 'png', 'cbor', or 'cbor-raw'\n *   * throttle_rate - the rate (in ms in between messages) at which to throttle the topics\n *   * queue_size - the queue created at bridge side for re-publishing webtopics (defaults to 100)\n *   * latch - latch the topic when publishing\n *   * queue_length - the queue length at bridge side used when subscribing (defaults to 0, no queueing).\n *   * reconnect_on_close - the flag to enable resubscription and readvertisement on close event(defaults to true).\n */\nfunction Topic(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.name = options.name;\n  this.messageType = options.messageType;\n  this.isAdvertised = false;\n  this.compression = options.compression || 'none';\n  this.throttle_rate = options.throttle_rate || 0;\n  this.latch = options.latch || false;\n  this.queue_size = options.queue_size || 100;\n  this.queue_length = options.queue_length || 0;\n  this.reconnect_on_close = options.reconnect_on_close !== undefined ? options.reconnect_on_close : true;\n\n  // Check for valid compression types\n  if (this.compression && this.compression !== 'png' && this.compression !== 'cbor' && this.compression !== 'cbor-raw' && this.compression !== 'none') {\n    this.emit('warning', this.compression + ' compression is not supported. No compression will be used.');\n    this.compression = 'none';\n  }\n\n  // Check if throttle rate is negative\n  if (this.throttle_rate < 0) {\n    this.emit('warning', this.throttle_rate + ' is not allowed. Set to 0');\n    this.throttle_rate = 0;\n  }\n  var that = this;\n  if (this.reconnect_on_close) {\n    this.callForSubscribeAndAdvertise = function (message) {\n      that.ros.callOnConnection(message);\n      that.waitForReconnect = false;\n      that.reconnectFunc = function () {\n        if (!that.waitForReconnect) {\n          that.waitForReconnect = true;\n          that.ros.callOnConnection(message);\n          that.ros.once('connection', function () {\n            that.waitForReconnect = false;\n          });\n        }\n      };\n      that.ros.on('close', that.reconnectFunc);\n    };\n  } else {\n    this.callForSubscribeAndAdvertise = this.ros.callOnConnection;\n  }\n  this._messageCallback = function (data) {\n    that.emit('message', new Message(data));\n  };\n}\nTopic.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * Every time a message is published for the given topic, the callback\n * will be called with the message object.\n *\n * @param callback - function with the following params:\n *   * message - the published message\n */\nTopic.prototype.subscribe = function (callback) {\n  if (typeof callback === 'function') {\n    this.on('message', callback);\n  }\n  if (this.subscribeId) {\n    return;\n  }\n  this.ros.on(this.name, this._messageCallback);\n  this.subscribeId = 'subscribe:' + this.name + ':' + ++this.ros.idCounter;\n  this.callForSubscribeAndAdvertise({\n    op: 'subscribe',\n    id: this.subscribeId,\n    type: this.messageType,\n    topic: this.name,\n    compression: this.compression,\n    throttle_rate: this.throttle_rate,\n    queue_length: this.queue_length\n  });\n};\n\n/**\n * Unregisters as a subscriber for the topic. Unsubscribing stop remove\n * all subscribe callbacks. To remove a call back, you must explicitly\n * pass the callback function in.\n *\n * @param callback - the optional callback to unregister, if\n *     * provided and other listeners are registered the topic won't\n *     * unsubscribe, just stop emitting to the passed listener\n */\nTopic.prototype.unsubscribe = function (callback) {\n  if (callback) {\n    this.off('message', callback);\n    // If there is any other callbacks still subscribed don't unsubscribe\n    if (this.listeners('message').length) {\n      return;\n    }\n  }\n  if (!this.subscribeId) {\n    return;\n  }\n  // Note: Don't call this.removeAllListeners, allow client to handle that themselves\n  this.ros.off(this.name, this._messageCallback);\n  if (this.reconnect_on_close) {\n    this.ros.off('close', this.reconnectFunc);\n  }\n  this.emit('unsubscribe');\n  this.ros.callOnConnection({\n    op: 'unsubscribe',\n    id: this.subscribeId,\n    topic: this.name\n  });\n  this.subscribeId = null;\n};\n\n/**\n * Registers as a publisher for the topic.\n */\nTopic.prototype.advertise = function () {\n  if (this.isAdvertised) {\n    return;\n  }\n  this.advertiseId = 'advertise:' + this.name + ':' + ++this.ros.idCounter;\n  this.callForSubscribeAndAdvertise({\n    op: 'advertise',\n    id: this.advertiseId,\n    type: this.messageType,\n    topic: this.name,\n    latch: this.latch,\n    queue_size: this.queue_size\n  });\n  this.isAdvertised = true;\n  if (!this.reconnect_on_close) {\n    var that = this;\n    this.ros.on('close', function () {\n      that.isAdvertised = false;\n    });\n  }\n};\n\n/**\n * Unregisters as a publisher for the topic.\n */\nTopic.prototype.unadvertise = function () {\n  if (!this.isAdvertised) {\n    return;\n  }\n  if (this.reconnect_on_close) {\n    this.ros.off('close', this.reconnectFunc);\n  }\n  this.emit('unadvertise');\n  this.ros.callOnConnection({\n    op: 'unadvertise',\n    id: this.advertiseId,\n    topic: this.name\n  });\n  this.isAdvertised = false;\n};\n\n/**\n * Publish the message.\n *\n * @param message - A ROSLIB.Message object.\n */\nTopic.prototype.publish = function (message) {\n  if (!this.isAdvertised) {\n    this.advertise();\n  }\n  this.ros.idCounter++;\n  var call = {\n    op: 'publish',\n    id: 'publish:' + this.name + ':' + this.ros.idCounter,\n    topic: this.name,\n    msg: message,\n    latch: this.latch\n  };\n  this.ros.callOnConnection(call);\n};\nmodule.exports = Topic;","map":{"version":3,"names":["EventEmitter2","require","Message","Topic","options","ros","name","messageType","isAdvertised","compression","throttle_rate","latch","queue_size","queue_length","reconnect_on_close","undefined","emit","that","callForSubscribeAndAdvertise","message","callOnConnection","waitForReconnect","reconnectFunc","once","on","_messageCallback","data","prototype","__proto__","subscribe","callback","subscribeId","idCounter","op","id","type","topic","unsubscribe","off","listeners","length","advertise","advertiseId","unadvertise","publish","call","msg","module","exports"],"sources":["/home/oben-n/react-ros-robot/node_modules/roslib/src/core/Topic.js"],"sourcesContent":["/**\n * @fileoverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\n\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\nvar Message = require('./Message');\n\n/**\n * Publish and/or subscribe to a topic in ROS.\n *\n * Emits the following events:\n *  * 'warning' - if there are any warning during the Topic creation\n *  * 'message' - the message data from rosbridge\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * name - the topic name, like /cmd_vel\n *   * messageType - the message type, like 'std_msgs/String'\n *   * compression - the type of compression to use, like 'png', 'cbor', or 'cbor-raw'\n *   * throttle_rate - the rate (in ms in between messages) at which to throttle the topics\n *   * queue_size - the queue created at bridge side for re-publishing webtopics (defaults to 100)\n *   * latch - latch the topic when publishing\n *   * queue_length - the queue length at bridge side used when subscribing (defaults to 0, no queueing).\n *   * reconnect_on_close - the flag to enable resubscription and readvertisement on close event(defaults to true).\n */\nfunction Topic(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.name = options.name;\n  this.messageType = options.messageType;\n  this.isAdvertised = false;\n  this.compression = options.compression || 'none';\n  this.throttle_rate = options.throttle_rate || 0;\n  this.latch = options.latch || false;\n  this.queue_size = options.queue_size || 100;\n  this.queue_length = options.queue_length || 0;\n  this.reconnect_on_close = options.reconnect_on_close !== undefined ? options.reconnect_on_close : true;\n\n  // Check for valid compression types\n  if (this.compression && this.compression !== 'png' &&\n    this.compression !== 'cbor' && this.compression !== 'cbor-raw' &&\n    this.compression !== 'none') {\n    this.emit('warning', this.compression +\n      ' compression is not supported. No compression will be used.');\n    this.compression = 'none';\n  }\n\n  // Check if throttle rate is negative\n  if (this.throttle_rate < 0) {\n    this.emit('warning', this.throttle_rate + ' is not allowed. Set to 0');\n    this.throttle_rate = 0;\n  }\n\n  var that = this;\n  if (this.reconnect_on_close) {\n    this.callForSubscribeAndAdvertise = function(message) {\n      that.ros.callOnConnection(message);\n\n      that.waitForReconnect = false;\n      that.reconnectFunc = function() {\n        if(!that.waitForReconnect) {\n          that.waitForReconnect = true;\n          that.ros.callOnConnection(message);\n          that.ros.once('connection', function() {\n            that.waitForReconnect = false;\n          });\n        }\n      };\n      that.ros.on('close', that.reconnectFunc);\n    };\n  }\n  else {\n    this.callForSubscribeAndAdvertise = this.ros.callOnConnection;\n  }\n\n  this._messageCallback = function(data) {\n    that.emit('message', new Message(data));\n  };\n}\nTopic.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * Every time a message is published for the given topic, the callback\n * will be called with the message object.\n *\n * @param callback - function with the following params:\n *   * message - the published message\n */\nTopic.prototype.subscribe = function(callback) {\n  if (typeof callback === 'function') {\n    this.on('message', callback);\n  }\n\n  if (this.subscribeId) { return; }\n  this.ros.on(this.name, this._messageCallback);\n  this.subscribeId = 'subscribe:' + this.name + ':' + (++this.ros.idCounter);\n\n  this.callForSubscribeAndAdvertise({\n    op: 'subscribe',\n    id: this.subscribeId,\n    type: this.messageType,\n    topic: this.name,\n    compression: this.compression,\n    throttle_rate: this.throttle_rate,\n    queue_length: this.queue_length\n  });\n};\n\n/**\n * Unregisters as a subscriber for the topic. Unsubscribing stop remove\n * all subscribe callbacks. To remove a call back, you must explicitly\n * pass the callback function in.\n *\n * @param callback - the optional callback to unregister, if\n *     * provided and other listeners are registered the topic won't\n *     * unsubscribe, just stop emitting to the passed listener\n */\nTopic.prototype.unsubscribe = function(callback) {\n  if (callback) {\n    this.off('message', callback);\n    // If there is any other callbacks still subscribed don't unsubscribe\n    if (this.listeners('message').length) { return; }\n  }\n  if (!this.subscribeId) { return; }\n  // Note: Don't call this.removeAllListeners, allow client to handle that themselves\n  this.ros.off(this.name, this._messageCallback);\n  if(this.reconnect_on_close) {\n    this.ros.off('close', this.reconnectFunc);\n  }\n  this.emit('unsubscribe');\n  this.ros.callOnConnection({\n    op: 'unsubscribe',\n    id: this.subscribeId,\n    topic: this.name\n  });\n  this.subscribeId = null;\n};\n\n\n/**\n * Registers as a publisher for the topic.\n */\nTopic.prototype.advertise = function() {\n  if (this.isAdvertised) {\n    return;\n  }\n  this.advertiseId = 'advertise:' + this.name + ':' + (++this.ros.idCounter);\n  this.callForSubscribeAndAdvertise({\n    op: 'advertise',\n    id: this.advertiseId,\n    type: this.messageType,\n    topic: this.name,\n    latch: this.latch,\n    queue_size: this.queue_size\n  });\n  this.isAdvertised = true;\n\n  if(!this.reconnect_on_close) {\n    var that = this;\n    this.ros.on('close', function() {\n      that.isAdvertised = false;\n    });\n  }\n};\n\n/**\n * Unregisters as a publisher for the topic.\n */\nTopic.prototype.unadvertise = function() {\n  if (!this.isAdvertised) {\n    return;\n  }\n  if(this.reconnect_on_close) {\n    this.ros.off('close', this.reconnectFunc);\n  }\n  this.emit('unadvertise');\n  this.ros.callOnConnection({\n    op: 'unadvertise',\n    id: this.advertiseId,\n    topic: this.name\n  });\n  this.isAdvertised = false;\n};\n\n/**\n * Publish the message.\n *\n * @param message - A ROSLIB.Message object.\n */\nTopic.prototype.publish = function(message) {\n  if (!this.isAdvertised) {\n    this.advertise();\n  }\n\n  this.ros.idCounter++;\n  var call = {\n    op: 'publish',\n    id: 'publish:' + this.name + ':' + this.ros.idCounter,\n    topic: this.name,\n    msg: message,\n    latch: this.latch\n  };\n  this.ros.callOnConnection(call);\n};\n\nmodule.exports = Topic;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}