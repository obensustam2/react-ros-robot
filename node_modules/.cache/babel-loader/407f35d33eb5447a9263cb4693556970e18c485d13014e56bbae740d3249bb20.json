{"ast":null,"code":"var _jsxFileName = \"/home/oben-n/react-ros-robot/src/components/Map.jsx\";\nimport React, { Component } from \"react\";\nimport Config from \"../scripts/config.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Map extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.view_map = this.view_map.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // window must be used because package is called from index.html\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleop\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"here\");\n      console.log(\"connection closed!\");\n      this.setState({\n        connected: false\n      });\n\n      // try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n  componentDidMount() {\n    this.init_connection();\n    this.view_map();\n  }\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"nav_div\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","Component","Config","Map","constructor","state","ros","view_map","bind","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","viewer","ROS2D","Viewer","divID","width","height","navClient","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation","render"],"sources":["/home/oben-n/react-ros-robot/src/components/Map.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport Config from \"../scripts/config.js\";\n\nclass Map extends Component {\n  state = {\n  ros: null,\n  };\n\n  constructor(){\n    super();\n    this.view_map= this.view_map.bind(this)\n  }\n\n  init_connection(){\n    this.state.ros = new window.ROSLIB.Ros(); // window must be used because package is called from index.html\n    console.log(this.state.ros);\n    \n    this.state.ros.on(\"connection\", () => {\n        console.log(\"connection established in Teleop\");\n        this.setState({connected: true});\n    }); \n\n    this.state.ros.on(\"close\", () => {\n        console.log(\"here\");\n        console.log(\"connection closed!\");\n        this.setState({connected: false});\n\n        // try to reconnect every 3 seconds\n        setTimeout(() => {\n            try {\n                this.state.ros.connect(\n                    \"ws://\" + \n                    Config.ROSBRIDGE_SERVER_IP + \n                    \":\" +  \n                    Config.ROSBRIDGE_SERVER_PORT +\n                    \"\"\n                );\n            } catch (error) {\n                console.log(\"connection problem\");\n            }\n        }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n        this.state.ros.connect(\n            \"ws://\" + \n            Config.ROSBRIDGE_SERVER_IP + \n            \":\" +  \n            Config.ROSBRIDGE_SERVER_PORT +\n            \"\"\n        );\n    } catch (error) {\n        console.log(\"connection problem\");\n    }\n}\n\n\n  componentDidMount() {\n    this.init_connection();\n    this.view_map();\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480,\n    });\n\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n        ros: this.state.ros,\n        rootObject: viewer.scene,\n        viewer: viewer,\n        serverName: \"/move_base\",\n        withOrientation: true,\n\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"nav_div\"></div>\n      </div>\n    );\n  }\n}\n\nexport default Map;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,sBAAsB;AAAC;AAE1C,MAAMC,GAAG,SAASF,SAAS,CAAC;EAK1BG,WAAW,GAAE;IACX,KAAK,EAAE;IAAC,KALVC,KAAK,GAAG;MACRC,GAAG,EAAE;IACL,CAAC;IAIC,IAAI,CAACC,QAAQ,GAAE,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;EACzC;EAEAC,eAAe,GAAE;IACf,IAAI,CAACJ,KAAK,CAACC,GAAG,GAAG,IAAII,MAAM,CAACC,MAAM,CAACC,GAAG,EAAE,CAAC,CAAC;IAC1CC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,KAAK,CAACC,GAAG,CAAC;IAE3B,IAAI,CAACD,KAAK,CAACC,GAAG,CAACS,EAAE,CAAC,YAAY,EAAE,MAAM;MAClCF,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C,IAAI,CAACE,QAAQ,CAAC;QAACC,SAAS,EAAE;MAAI,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI,CAACZ,KAAK,CAACC,GAAG,CAACS,EAAE,CAAC,OAAO,EAAE,MAAM;MAC7BF,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBD,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,IAAI,CAACE,QAAQ,CAAC;QAACC,SAAS,EAAE;MAAK,CAAC,CAAC;;MAEjC;MACAC,UAAU,CAAC,MAAM;QACb,IAAI;UACA,IAAI,CAACb,KAAK,CAACC,GAAG,CAACa,OAAO,CAClB,OAAO,GACPjB,MAAM,CAACkB,mBAAmB,GAC1B,GAAG,GACHlB,MAAM,CAACmB,qBAAqB,GAC5B,EAAE,CACL;QACL,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZT,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACrC;MACJ,CAAC,EAAEZ,MAAM,CAACqB,kBAAkB,CAAC;IACjC,CAAC,CAAC;IAEF,IAAI;MACA,IAAI,CAAClB,KAAK,CAACC,GAAG,CAACa,OAAO,CAClB,OAAO,GACPjB,MAAM,CAACkB,mBAAmB,GAC1B,GAAG,GACHlB,MAAM,CAACmB,qBAAqB,GAC5B,EAAE,CACL;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZT,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACrC;EACJ;EAGEU,iBAAiB,GAAG;IAClB,IAAI,CAACf,eAAe,EAAE;IACtB,IAAI,CAACF,QAAQ,EAAE;EACjB;EAEAA,QAAQ,GAAG;IACT,IAAIkB,MAAM,GAAG,IAAIf,MAAM,CAACgB,KAAK,CAACC,MAAM,CAAC;MACnCC,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAIC,SAAS,GAAG,IAAIrB,MAAM,CAACsB,KAAK,CAACC,sBAAsB,CAAC;MACpD3B,GAAG,EAAE,IAAI,CAACD,KAAK,CAACC,GAAG;MACnB4B,UAAU,EAAET,MAAM,CAACU,KAAK;MACxBV,MAAM,EAAEA,MAAM;MACdW,UAAU,EAAE,YAAY;MACxBC,eAAe,EAAE;IAErB,CAAC,CAAC;EACJ;EAEAC,MAAM,GAAG;IACP,oBACE;MAAA,uBACE;QAAK,EAAE,EAAC;MAAS;QAAA;QAAA;QAAA;MAAA;IAAO;MAAA;MAAA;MAAA;IAAA,QACpB;EAEV;AACF;AAEA,eAAenC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}