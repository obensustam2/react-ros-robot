{"ast":null,"code":"/**\n * @fileoverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\n\nvar WebSocket = require('ws');\nvar WorkerSocket = require('../util/workerSocket');\nvar socketAdapter = require('./SocketAdapter.js');\nvar Service = require('./Service');\nvar ServiceRequest = require('./ServiceRequest');\nvar assign = require('object-assign');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * Manages connection to the server and all interactions with ROS.\n *\n * Emits the following events:\n *  * 'error' - there was an error with ROS\n *  * 'connection' - connected to the WebSocket server\n *  * 'close' - disconnected to the WebSocket server\n *  * <topicName> - a message came from rosbridge with the given topic name\n *  * <serviceID> - a service response came from rosbridge with the given ID\n *\n * @constructor\n * @param options - possible keys include: <br>\n *   * url (optional) - (can be specified later with `connect`) the WebSocket URL for rosbridge or the node server url to connect using socket.io (if socket.io exists in the page) <br>\n *   * groovyCompatibility - don't use interfaces that changed after the last groovy release or rosbridge_suite and related tools (defaults to true)\n *   * transportLibrary (optional) - one of 'websocket', 'workersocket' (default), 'socket.io' or RTCPeerConnection instance controlling how the connection is created in `connect`.\n *   * transportOptions (optional) - the options to use use when creating a connection. Currently only used if `transportLibrary` is RTCPeerConnection.\n */\nfunction Ros(options) {\n  options = options || {};\n  var that = this;\n  this.socket = null;\n  this.idCounter = 0;\n  this.isConnected = false;\n  this.transportLibrary = options.transportLibrary || 'websocket';\n  this.transportOptions = options.transportOptions || {};\n  this._sendFunc = function (msg) {\n    that.sendEncodedMessage(msg);\n  };\n  if (typeof options.groovyCompatibility === 'undefined') {\n    this.groovyCompatibility = true;\n  } else {\n    this.groovyCompatibility = options.groovyCompatibility;\n  }\n\n  // Sets unlimited event listeners.\n  this.setMaxListeners(0);\n\n  // begin by checking if a URL was given\n  if (options.url) {\n    this.connect(options.url);\n  }\n}\nRos.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * Connect to the specified WebSocket.\n *\n * @param url - WebSocket URL or RTCDataChannel label for Rosbridge\n */\nRos.prototype.connect = function (url) {\n  if (this.transportLibrary === 'socket.io') {\n    this.socket = assign(io(url, {\n      'force new connection': true\n    }), socketAdapter(this));\n    this.socket.on('connect', this.socket.onopen);\n    this.socket.on('data', this.socket.onmessage);\n    this.socket.on('close', this.socket.onclose);\n    this.socket.on('error', this.socket.onerror);\n  } else if (this.transportLibrary.constructor.name === 'RTCPeerConnection') {\n    this.socket = assign(this.transportLibrary.createDataChannel(url, this.transportOptions), socketAdapter(this));\n  } else if (this.transportLibrary === 'websocket') {\n    if (!this.socket || this.socket.readyState === WebSocket.CLOSED) {\n      var sock = new WebSocket(url);\n      sock.binaryType = 'arraybuffer';\n      this.socket = assign(sock, socketAdapter(this));\n    }\n  } else if (this.transportLibrary === 'workersocket') {\n    this.socket = assign(new WorkerSocket(url), socketAdapter(this));\n  } else {\n    throw 'Unknown transportLibrary: ' + this.transportLibrary.toString();\n  }\n};\n\n/**\n * Disconnect from the WebSocket server.\n */\nRos.prototype.close = function () {\n  if (this.socket) {\n    this.socket.close();\n  }\n};\n\n/**\n * Sends an authorization request to the server.\n *\n * @param mac - MAC (hash) string given by the trusted source.\n * @param client - IP of the client.\n * @param dest - IP of the destination.\n * @param rand - Random string given by the trusted source.\n * @param t - Time of the authorization request.\n * @param level - User level as a string given by the client.\n * @param end - End time of the client's session.\n */\nRos.prototype.authenticate = function (mac, client, dest, rand, t, level, end) {\n  // create the request\n  var auth = {\n    op: 'auth',\n    mac: mac,\n    client: client,\n    dest: dest,\n    rand: rand,\n    t: t,\n    level: level,\n    end: end\n  };\n  // send the request\n  this.callOnConnection(auth);\n};\nRos.prototype.sendEncodedMessage = function (messageEncoded) {\n  var emitter = null;\n  var that = this;\n  if (this.transportLibrary === 'socket.io') {\n    emitter = function (msg) {\n      that.socket.emit('operation', msg);\n    };\n  } else {\n    emitter = function (msg) {\n      that.socket.send(msg);\n    };\n  }\n  if (!this.isConnected) {\n    that.once('connection', function () {\n      emitter(messageEncoded);\n    });\n  } else {\n    emitter(messageEncoded);\n  }\n};\n\n/**\n * Sends the message over the WebSocket, but queues the message up if not yet\n * connected.\n */\nRos.prototype.callOnConnection = function (message) {\n  if (this.transportOptions.encoder) {\n    this.transportOptions.encoder(message, this._sendFunc);\n  } else {\n    this._sendFunc(JSON.stringify(message));\n  }\n};\n\n/**\n * Sends a set_level request to the server\n *\n * @param level - Status level (none, error, warning, info)\n * @param id - Optional: Operation ID to change status level on\n */\nRos.prototype.setStatusLevel = function (level, id) {\n  var levelMsg = {\n    op: 'set_level',\n    level: level,\n    id: id\n  };\n  this.callOnConnection(levelMsg);\n};\n\n/**\n * Retrieves Action Servers in ROS as an array of string\n *\n * @param callback function with params:\n *   * actionservers - Array of action server names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getActionServers = function (callback, failedCallback) {\n  var getActionServers = new Service({\n    ros: this,\n    name: '/rosapi/action_servers',\n    serviceType: 'rosapi/GetActionServers'\n  });\n  var request = new ServiceRequest({});\n  if (typeof failedCallback === 'function') {\n    getActionServers.callService(request, function (result) {\n      callback(result.action_servers);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    getActionServers.callService(request, function (result) {\n      callback(result.action_servers);\n    });\n  }\n};\n\n/**\n * Retrieves list of topics in ROS as an array.\n *\n * @param callback function with params:\n *   * topics - Array of topic names\n *   * types - Array of message type names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getTopics = function (callback, failedCallback) {\n  var topicsClient = new Service({\n    ros: this,\n    name: '/rosapi/topics',\n    serviceType: 'rosapi/Topics'\n  });\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function') {\n    topicsClient.callService(request, function (result) {\n      callback(result);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    topicsClient.callService(request, function (result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves Topics in ROS as an array as specific type\n *\n * @param topicType topic type to find\n * @param callback function with params:\n *   * topics - Array of topic names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getTopicsForType = function (topicType, callback, failedCallback) {\n  var topicsForTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/topics_for_type',\n    serviceType: 'rosapi/TopicsForType'\n  });\n  var request = new ServiceRequest({\n    type: topicType\n  });\n  if (typeof failedCallback === 'function') {\n    topicsForTypeClient.callService(request, function (result) {\n      callback(result.topics);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    topicsForTypeClient.callService(request, function (result) {\n      callback(result.topics);\n    });\n  }\n};\n\n/**\n * Retrieves list of active service names in ROS.\n *\n * @param callback - function with the following params:\n *   * services - array of service names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServices = function (callback, failedCallback) {\n  var servicesClient = new Service({\n    ros: this,\n    name: '/rosapi/services',\n    serviceType: 'rosapi/Services'\n  });\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function') {\n    servicesClient.callService(request, function (result) {\n      callback(result.services);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    servicesClient.callService(request, function (result) {\n      callback(result.services);\n    });\n  }\n};\n\n/**\n * Retrieves list of services in ROS as an array as specific type\n *\n * @param serviceType service type to find\n * @param callback function with params:\n *   * topics - Array of service names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServicesForType = function (serviceType, callback, failedCallback) {\n  var servicesForTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/services_for_type',\n    serviceType: 'rosapi/ServicesForType'\n  });\n  var request = new ServiceRequest({\n    type: serviceType\n  });\n  if (typeof failedCallback === 'function') {\n    servicesForTypeClient.callService(request, function (result) {\n      callback(result.services);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    servicesForTypeClient.callService(request, function (result) {\n      callback(result.services);\n    });\n  }\n};\n\n/**\n * Retrieves a detail of ROS service request.\n *\n * @param service name of service:\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServiceRequestDetails = function (type, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/service_request_details',\n    serviceType: 'rosapi/ServiceRequestDetails'\n  });\n  var request = new ServiceRequest({\n    type: type\n  });\n  if (typeof failedCallback === 'function') {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves a detail of ROS service request.\n *\n * @param service name of service\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServiceResponseDetails = function (type, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/service_response_details',\n    serviceType: 'rosapi/ServiceResponseDetails'\n  });\n  var request = new ServiceRequest({\n    type: type\n  });\n  if (typeof failedCallback === 'function') {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves list of active node names in ROS.\n *\n * @param callback - function with the following params:\n *   * nodes - array of node names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getNodes = function (callback, failedCallback) {\n  var nodesClient = new Service({\n    ros: this,\n    name: '/rosapi/nodes',\n    serviceType: 'rosapi/Nodes'\n  });\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function') {\n    nodesClient.callService(request, function (result) {\n      callback(result.nodes);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    nodesClient.callService(request, function (result) {\n      callback(result.nodes);\n    });\n  }\n};\n\n/**\n  * Retrieves list subscribed topics, publishing topics and services of a specific node\n  *\n  * @param node name of the node:\n  * @param callback - function with params:\n  *   * publications - array of published topic names\n  *   * subscriptions - array of subscribed topic names\n  *   * services - array of service names hosted\n  * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n  */\nRos.prototype.getNodeDetails = function (node, callback, failedCallback) {\n  var nodesClient = new Service({\n    ros: this,\n    name: '/rosapi/node_details',\n    serviceType: 'rosapi/NodeDetails'\n  });\n  var request = new ServiceRequest({\n    node: node\n  });\n  if (typeof failedCallback === 'function') {\n    nodesClient.callService(request, function (result) {\n      callback(result.subscribing, result.publishing, result.services);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    nodesClient.callService(request, function (result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves list of param names from the ROS Parameter Server.\n *\n * @param callback function with params:\n *  * params - array of param names.\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getParams = function (callback, failedCallback) {\n  var paramsClient = new Service({\n    ros: this,\n    name: '/rosapi/get_param_names',\n    serviceType: 'rosapi/GetParamNames'\n  });\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function') {\n    paramsClient.callService(request, function (result) {\n      callback(result.names);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    paramsClient.callService(request, function (result) {\n      callback(result.names);\n    });\n  }\n};\n\n/**\n * Retrieves a type of ROS topic.\n *\n * @param topic name of the topic:\n * @param callback - function with params:\n *   * type - String of the topic type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getTopicType = function (topic, callback, failedCallback) {\n  var topicTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/topic_type',\n    serviceType: 'rosapi/TopicType'\n  });\n  var request = new ServiceRequest({\n    topic: topic\n  });\n  if (typeof failedCallback === 'function') {\n    topicTypeClient.callService(request, function (result) {\n      callback(result.type);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    topicTypeClient.callService(request, function (result) {\n      callback(result.type);\n    });\n  }\n};\n\n/**\n * Retrieves a type of ROS service.\n *\n * @param service name of service:\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServiceType = function (service, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/service_type',\n    serviceType: 'rosapi/ServiceType'\n  });\n  var request = new ServiceRequest({\n    service: service\n  });\n  if (typeof failedCallback === 'function') {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result.type);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result.type);\n    });\n  }\n};\n\n/**\n * Retrieves a detail of ROS message.\n *\n * @param message - String of a topic type\n * @param callback - function with params:\n *   * details - Array of the message detail\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getMessageDetails = function (message, callback, failedCallback) {\n  var messageDetailClient = new Service({\n    ros: this,\n    name: '/rosapi/message_details',\n    serviceType: 'rosapi/MessageDetails'\n  });\n  var request = new ServiceRequest({\n    type: message\n  });\n  if (typeof failedCallback === 'function') {\n    messageDetailClient.callService(request, function (result) {\n      callback(result.typedefs);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    messageDetailClient.callService(request, function (result) {\n      callback(result.typedefs);\n    });\n  }\n};\n\n/**\n * Decode a typedefs into a dictionary like `rosmsg show foo/bar`\n *\n * @param defs - array of type_def dictionary\n */\nRos.prototype.decodeTypeDefs = function (defs) {\n  var that = this;\n\n  // calls itself recursively to resolve type definition using hints.\n  var decodeTypeDefsRec = function (theType, hints) {\n    var typeDefDict = {};\n    for (var i = 0; i < theType.fieldnames.length; i++) {\n      var arrayLen = theType.fieldarraylen[i];\n      var fieldName = theType.fieldnames[i];\n      var fieldType = theType.fieldtypes[i];\n      if (fieldType.indexOf('/') === -1) {\n        // check the fieldType includes '/' or not\n        if (arrayLen === -1) {\n          typeDefDict[fieldName] = fieldType;\n        } else {\n          typeDefDict[fieldName] = [fieldType];\n        }\n      } else {\n        // lookup the name\n        var sub = false;\n        for (var j = 0; j < hints.length; j++) {\n          if (hints[j].type.toString() === fieldType.toString()) {\n            sub = hints[j];\n            break;\n          }\n        }\n        if (sub) {\n          var subResult = decodeTypeDefsRec(sub, hints);\n          if (arrayLen === -1) {} else {\n            typeDefDict[fieldName] = [subResult];\n          }\n        } else {\n          that.emit('error', 'Cannot find ' + fieldType + ' in decodeTypeDefs');\n        }\n      }\n    }\n    return typeDefDict;\n  };\n  return decodeTypeDefsRec(defs[0], defs);\n};\n\n/**\n * Retrieves list of topics and their associated type definitions.\n *\n * @param callback function with params:\n *   * topics - Array of topic names\n *   * types - Array of message type names\n *   * typedefs_full_text - Array of full definitions of message types, similar to `gendeps --cat`\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n *\n */\nRos.prototype.getTopicsAndRawTypes = function (callback, failedCallback) {\n  var topicsAndRawTypesClient = new Service({\n    ros: this,\n    name: '/rosapi/topics_and_raw_types',\n    serviceType: 'rosapi/TopicsAndRawTypes'\n  });\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function') {\n    topicsAndRawTypesClient.callService(request, function (result) {\n      callback(result);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    topicsAndRawTypesClient.callService(request, function (result) {\n      callback(result);\n    });\n  }\n};\nmodule.exports = Ros;","map":{"version":3,"names":["WebSocket","require","WorkerSocket","socketAdapter","Service","ServiceRequest","assign","EventEmitter2","Ros","options","that","socket","idCounter","isConnected","transportLibrary","transportOptions","_sendFunc","msg","sendEncodedMessage","groovyCompatibility","setMaxListeners","url","connect","prototype","__proto__","io","on","onopen","onmessage","onclose","onerror","constructor","name","createDataChannel","readyState","CLOSED","sock","binaryType","toString","close","authenticate","mac","client","dest","rand","t","level","end","auth","op","callOnConnection","messageEncoded","emitter","emit","send","once","message","encoder","JSON","stringify","setStatusLevel","id","levelMsg","getActionServers","callback","failedCallback","ros","serviceType","request","callService","result","action_servers","getTopics","topicsClient","getTopicsForType","topicType","topicsForTypeClient","type","topics","getServices","servicesClient","services","getServicesForType","servicesForTypeClient","getServiceRequestDetails","serviceTypeClient","getServiceResponseDetails","getNodes","nodesClient","nodes","getNodeDetails","node","subscribing","publishing","getParams","paramsClient","names","getTopicType","topic","topicTypeClient","getServiceType","service","getMessageDetails","messageDetailClient","typedefs","decodeTypeDefs","defs","decodeTypeDefsRec","theType","hints","typeDefDict","i","fieldnames","length","arrayLen","fieldarraylen","fieldName","fieldType","fieldtypes","indexOf","sub","j","subResult","getTopicsAndRawTypes","topicsAndRawTypesClient","module","exports"],"sources":["/home/oben-n/react-ros-robot/node_modules/roslib/src/core/Ros.js"],"sourcesContent":["/**\n * @fileoverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\n\nvar WebSocket = require('ws');\nvar WorkerSocket = require('../util/workerSocket');\nvar socketAdapter = require('./SocketAdapter.js');\n\nvar Service = require('./Service');\nvar ServiceRequest = require('./ServiceRequest');\n\nvar assign = require('object-assign');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * Manages connection to the server and all interactions with ROS.\n *\n * Emits the following events:\n *  * 'error' - there was an error with ROS\n *  * 'connection' - connected to the WebSocket server\n *  * 'close' - disconnected to the WebSocket server\n *  * <topicName> - a message came from rosbridge with the given topic name\n *  * <serviceID> - a service response came from rosbridge with the given ID\n *\n * @constructor\n * @param options - possible keys include: <br>\n *   * url (optional) - (can be specified later with `connect`) the WebSocket URL for rosbridge or the node server url to connect using socket.io (if socket.io exists in the page) <br>\n *   * groovyCompatibility - don't use interfaces that changed after the last groovy release or rosbridge_suite and related tools (defaults to true)\n *   * transportLibrary (optional) - one of 'websocket', 'workersocket' (default), 'socket.io' or RTCPeerConnection instance controlling how the connection is created in `connect`.\n *   * transportOptions (optional) - the options to use use when creating a connection. Currently only used if `transportLibrary` is RTCPeerConnection.\n */\nfunction Ros(options) {\n  options = options || {};\n  var that = this;\n  this.socket = null;\n  this.idCounter = 0;\n  this.isConnected = false;\n  this.transportLibrary = options.transportLibrary || 'websocket';\n  this.transportOptions = options.transportOptions || {};\n  this._sendFunc = function(msg) { that.sendEncodedMessage(msg); };\n\n  if (typeof options.groovyCompatibility === 'undefined') {\n    this.groovyCompatibility = true;\n  }\n  else {\n    this.groovyCompatibility = options.groovyCompatibility;\n  }\n\n  // Sets unlimited event listeners.\n  this.setMaxListeners(0);\n\n  // begin by checking if a URL was given\n  if (options.url) {\n    this.connect(options.url);\n  }\n}\n\nRos.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * Connect to the specified WebSocket.\n *\n * @param url - WebSocket URL or RTCDataChannel label for Rosbridge\n */\nRos.prototype.connect = function(url) {\n  if (this.transportLibrary === 'socket.io') {\n    this.socket = assign(io(url, {'force new connection': true}), socketAdapter(this));\n    this.socket.on('connect', this.socket.onopen);\n    this.socket.on('data', this.socket.onmessage);\n    this.socket.on('close', this.socket.onclose);\n    this.socket.on('error', this.socket.onerror);\n  } else if (this.transportLibrary.constructor.name === 'RTCPeerConnection') {\n    this.socket = assign(this.transportLibrary.createDataChannel(url, this.transportOptions), socketAdapter(this));\n  } else if (this.transportLibrary === 'websocket') {\n    if (!this.socket || this.socket.readyState === WebSocket.CLOSED) {\n      var sock = new WebSocket(url);\n      sock.binaryType = 'arraybuffer';\n      this.socket = assign(sock, socketAdapter(this));\n    }\n  } else if (this.transportLibrary === 'workersocket') {\n    this.socket = assign(new WorkerSocket(url), socketAdapter(this));\n  } else {\n    throw 'Unknown transportLibrary: ' + this.transportLibrary.toString();\n  }\n\n};\n\n/**\n * Disconnect from the WebSocket server.\n */\nRos.prototype.close = function() {\n  if (this.socket) {\n    this.socket.close();\n  }\n};\n\n/**\n * Sends an authorization request to the server.\n *\n * @param mac - MAC (hash) string given by the trusted source.\n * @param client - IP of the client.\n * @param dest - IP of the destination.\n * @param rand - Random string given by the trusted source.\n * @param t - Time of the authorization request.\n * @param level - User level as a string given by the client.\n * @param end - End time of the client's session.\n */\nRos.prototype.authenticate = function(mac, client, dest, rand, t, level, end) {\n  // create the request\n  var auth = {\n    op : 'auth',\n    mac : mac,\n    client : client,\n    dest : dest,\n    rand : rand,\n    t : t,\n    level : level,\n    end : end\n  };\n  // send the request\n  this.callOnConnection(auth);\n};\n\nRos.prototype.sendEncodedMessage= function(messageEncoded) {\n  var emitter = null;\n  var that = this;\n  if (this.transportLibrary === 'socket.io') {\n    emitter = function(msg){that.socket.emit('operation', msg);};\n  } else {\n    emitter = function(msg){that.socket.send(msg);};\n  }\n\n  if (!this.isConnected) {\n    that.once('connection', function() {\n      emitter(messageEncoded);\n    });\n  } else {\n    emitter(messageEncoded);\n  }\n};\n\n/**\n * Sends the message over the WebSocket, but queues the message up if not yet\n * connected.\n */\nRos.prototype.callOnConnection = function(message) {\n  if (this.transportOptions.encoder) {\n    this.transportOptions.encoder(message, this._sendFunc);\n  } else {\n    this._sendFunc(JSON.stringify(message));\n  }\n};\n\n/**\n * Sends a set_level request to the server\n *\n * @param level - Status level (none, error, warning, info)\n * @param id - Optional: Operation ID to change status level on\n */\nRos.prototype.setStatusLevel = function(level, id){\n  var levelMsg = {\n    op: 'set_level',\n    level: level,\n    id: id\n  };\n\n  this.callOnConnection(levelMsg);\n};\n\n/**\n * Retrieves Action Servers in ROS as an array of string\n *\n * @param callback function with params:\n *   * actionservers - Array of action server names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getActionServers = function(callback, failedCallback) {\n  var getActionServers = new Service({\n    ros : this,\n    name : '/rosapi/action_servers',\n    serviceType : 'rosapi/GetActionServers'\n  });\n\n  var request = new ServiceRequest({});\n  if (typeof failedCallback === 'function'){\n    getActionServers.callService(request,\n      function(result) {\n        callback(result.action_servers);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    getActionServers.callService(request, function(result) {\n      callback(result.action_servers);\n    });\n  }\n};\n\n/**\n * Retrieves list of topics in ROS as an array.\n *\n * @param callback function with params:\n *   * topics - Array of topic names\n *   * types - Array of message type names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getTopics = function(callback, failedCallback) {\n  var topicsClient = new Service({\n    ros : this,\n    name : '/rosapi/topics',\n    serviceType : 'rosapi/Topics'\n  });\n\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function'){\n    topicsClient.callService(request,\n      function(result) {\n        callback(result);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    topicsClient.callService(request, function(result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves Topics in ROS as an array as specific type\n *\n * @param topicType topic type to find\n * @param callback function with params:\n *   * topics - Array of topic names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getTopicsForType = function(topicType, callback, failedCallback) {\n  var topicsForTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/topics_for_type',\n    serviceType : 'rosapi/TopicsForType'\n  });\n\n  var request = new ServiceRequest({\n    type: topicType\n  });\n  if (typeof failedCallback === 'function'){\n    topicsForTypeClient.callService(request,\n      function(result) {\n        callback(result.topics);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    topicsForTypeClient.callService(request, function(result) {\n      callback(result.topics);\n    });\n  }\n};\n\n/**\n * Retrieves list of active service names in ROS.\n *\n * @param callback - function with the following params:\n *   * services - array of service names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServices = function(callback, failedCallback) {\n  var servicesClient = new Service({\n    ros : this,\n    name : '/rosapi/services',\n    serviceType : 'rosapi/Services'\n  });\n\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function'){\n    servicesClient.callService(request,\n      function(result) {\n        callback(result.services);\n      },\n      function(message) {\n        failedCallback(message);\n      }\n    );\n  }else{\n    servicesClient.callService(request, function(result) {\n      callback(result.services);\n    });\n  }\n};\n\n/**\n * Retrieves list of services in ROS as an array as specific type\n *\n * @param serviceType service type to find\n * @param callback function with params:\n *   * topics - Array of service names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServicesForType = function(serviceType, callback, failedCallback) {\n  var servicesForTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/services_for_type',\n    serviceType : 'rosapi/ServicesForType'\n  });\n\n  var request = new ServiceRequest({\n    type: serviceType\n  });\n  if (typeof failedCallback === 'function'){\n    servicesForTypeClient.callService(request,\n      function(result) {\n        callback(result.services);\n      },\n      function(message) {\n        failedCallback(message);\n      }\n    );\n  }else{\n    servicesForTypeClient.callService(request, function(result) {\n      callback(result.services);\n    });\n  }\n};\n\n/**\n * Retrieves a detail of ROS service request.\n *\n * @param service name of service:\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServiceRequestDetails = function(type, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/service_request_details',\n    serviceType : 'rosapi/ServiceRequestDetails'\n  });\n  var request = new ServiceRequest({\n    type: type\n  });\n\n  if (typeof failedCallback === 'function'){\n    serviceTypeClient.callService(request,\n      function(result) {\n        callback(result);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    serviceTypeClient.callService(request, function(result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves a detail of ROS service request.\n *\n * @param service name of service\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServiceResponseDetails = function(type, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/service_response_details',\n    serviceType : 'rosapi/ServiceResponseDetails'\n  });\n  var request = new ServiceRequest({\n    type: type\n  });\n\n  if (typeof failedCallback === 'function'){\n    serviceTypeClient.callService(request,\n      function(result) {\n        callback(result);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    serviceTypeClient.callService(request, function(result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves list of active node names in ROS.\n *\n * @param callback - function with the following params:\n *   * nodes - array of node names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getNodes = function(callback, failedCallback) {\n  var nodesClient = new Service({\n    ros : this,\n    name : '/rosapi/nodes',\n    serviceType : 'rosapi/Nodes'\n  });\n\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function'){\n    nodesClient.callService(request,\n      function(result) {\n        callback(result.nodes);\n      },\n      function(message) {\n        failedCallback(message);\n      }\n    );\n  }else{\n    nodesClient.callService(request, function(result) {\n      callback(result.nodes);\n    });\n  }\n};\n\n/**\n  * Retrieves list subscribed topics, publishing topics and services of a specific node\n  *\n  * @param node name of the node:\n  * @param callback - function with params:\n  *   * publications - array of published topic names\n  *   * subscriptions - array of subscribed topic names\n  *   * services - array of service names hosted\n  * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n  */\nRos.prototype.getNodeDetails = function(node, callback, failedCallback) {\n  var nodesClient = new Service({\n    ros : this,\n    name : '/rosapi/node_details',\n    serviceType : 'rosapi/NodeDetails'\n  });\n\n  var request = new ServiceRequest({\n    node: node\n  });\n  if (typeof failedCallback === 'function'){\n    nodesClient.callService(request,\n      function(result) {\n        callback(result.subscribing, result.publishing, result.services);\n      },\n      function(message) {\n        failedCallback(message);\n      }\n    );\n  } else {\n    nodesClient.callService(request, function(result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves list of param names from the ROS Parameter Server.\n *\n * @param callback function with params:\n *  * params - array of param names.\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getParams = function(callback, failedCallback) {\n  var paramsClient = new Service({\n    ros : this,\n    name : '/rosapi/get_param_names',\n    serviceType : 'rosapi/GetParamNames'\n  });\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function'){\n    paramsClient.callService(request,\n      function(result) {\n        callback(result.names);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    paramsClient.callService(request, function(result) {\n      callback(result.names);\n    });\n  }\n};\n\n/**\n * Retrieves a type of ROS topic.\n *\n * @param topic name of the topic:\n * @param callback - function with params:\n *   * type - String of the topic type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getTopicType = function(topic, callback, failedCallback) {\n  var topicTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/topic_type',\n    serviceType : 'rosapi/TopicType'\n  });\n  var request = new ServiceRequest({\n    topic: topic\n  });\n\n  if (typeof failedCallback === 'function'){\n    topicTypeClient.callService(request,\n      function(result) {\n        callback(result.type);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    topicTypeClient.callService(request, function(result) {\n      callback(result.type);\n    });\n  }\n};\n\n/**\n * Retrieves a type of ROS service.\n *\n * @param service name of service:\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServiceType = function(service, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/service_type',\n    serviceType : 'rosapi/ServiceType'\n  });\n  var request = new ServiceRequest({\n    service: service\n  });\n\n  if (typeof failedCallback === 'function'){\n    serviceTypeClient.callService(request,\n      function(result) {\n        callback(result.type);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    serviceTypeClient.callService(request, function(result) {\n      callback(result.type);\n    });\n  }\n};\n\n/**\n * Retrieves a detail of ROS message.\n *\n * @param message - String of a topic type\n * @param callback - function with params:\n *   * details - Array of the message detail\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getMessageDetails = function(message, callback, failedCallback) {\n  var messageDetailClient = new Service({\n    ros : this,\n    name : '/rosapi/message_details',\n    serviceType : 'rosapi/MessageDetails'\n  });\n  var request = new ServiceRequest({\n    type: message\n  });\n\n  if (typeof failedCallback === 'function'){\n    messageDetailClient.callService(request,\n      function(result) {\n        callback(result.typedefs);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    messageDetailClient.callService(request, function(result) {\n      callback(result.typedefs);\n    });\n  }\n};\n\n/**\n * Decode a typedefs into a dictionary like `rosmsg show foo/bar`\n *\n * @param defs - array of type_def dictionary\n */\nRos.prototype.decodeTypeDefs = function(defs) {\n  var that = this;\n\n  // calls itself recursively to resolve type definition using hints.\n  var decodeTypeDefsRec = function(theType, hints) {\n    var typeDefDict = {};\n    for (var i = 0; i < theType.fieldnames.length; i++) {\n      var arrayLen = theType.fieldarraylen[i];\n      var fieldName = theType.fieldnames[i];\n      var fieldType = theType.fieldtypes[i];\n      if (fieldType.indexOf('/') === -1) { // check the fieldType includes '/' or not\n        if (arrayLen === -1) {\n          typeDefDict[fieldName] = fieldType;\n        }\n        else {\n          typeDefDict[fieldName] = [fieldType];\n        }\n      }\n      else {\n        // lookup the name\n        var sub = false;\n        for (var j = 0; j < hints.length; j++) {\n          if (hints[j].type.toString() === fieldType.toString()) {\n            sub = hints[j];\n            break;\n          }\n        }\n        if (sub) {\n          var subResult = decodeTypeDefsRec(sub, hints);\n          if (arrayLen === -1) {\n          }\n          else {\n            typeDefDict[fieldName] = [subResult];\n          }\n        }\n        else {\n          that.emit('error', 'Cannot find ' + fieldType + ' in decodeTypeDefs');\n        }\n      }\n    }\n    return typeDefDict;\n  };\n\n  return decodeTypeDefsRec(defs[0], defs);\n};\n\n/**\n * Retrieves list of topics and their associated type definitions.\n *\n * @param callback function with params:\n *   * topics - Array of topic names\n *   * types - Array of message type names\n *   * typedefs_full_text - Array of full definitions of message types, similar to `gendeps --cat`\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n *\n */\nRos.prototype.getTopicsAndRawTypes = function(callback, failedCallback) {\n  var topicsAndRawTypesClient = new Service({\n    ros : this,\n    name : '/rosapi/topics_and_raw_types',\n    serviceType : 'rosapi/TopicsAndRawTypes'\n  });\n\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function'){\n    topicsAndRawTypesClient.callService(request,\n      function(result) {\n        callback(result);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    topicsAndRawTypesClient.callService(request, function(result) {\n      callback(result);\n    });\n  }\n};\n\n\nmodule.exports = Ros;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}