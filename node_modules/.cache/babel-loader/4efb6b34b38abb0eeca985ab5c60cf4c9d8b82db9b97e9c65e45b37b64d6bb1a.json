{"ast":null,"code":"var _jsxFileName = \"/home/oben-n/react-ros-robot/src/components/Map.jsx\";\nimport React, { Component } from \"react\";\nimport Config from \"../scripts/config.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Map extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.viewMap = this.ViewMap.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // window must be used because package is called from index.html\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleop\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"here\");\n      console.log(\"connection closed!\");\n      this.setState({\n        connected: false\n      });\n\n      // try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n  componentDidMount() {\n    this.init_connection();\n    this.viewMap();\n  }\n  viewMap() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480\n    });\n    var NavClient = new window.NAV2D().OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"nav_div\",\n        children: \"Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","Component","Config","Map","constructor","state","ros","viewMap","ViewMap","bind","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","viewer","ROS2D","Viewer","divID","width","height","NavClient","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation","render"],"sources":["/home/oben-n/react-ros-robot/src/components/Map.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport Config from \"../scripts/config.js\";\n\nclass Map extends Component {\n    \n    state = {\n        ros: null,\n    };\n\n    constructor() {\n        super();\n        this.viewMap = this.ViewMap.bind(this);\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros(); // window must be used because package is called from index.html\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established in Teleop\");\n            this.setState({connected: true});\n        }); \n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"here\");\n            console.log(\"connection closed!\");\n            this.setState({connected: false});\n\n            // try to reconnect every 3 seconds\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" + \n                        Config.ROSBRIDGE_SERVER_IP + \n                        \":\" +  \n                        Config.ROSBRIDGE_SERVER_PORT +\n                        \"\"\n                    );\n                } catch (error) {\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n        });\n\n        try {\n            this.state.ros.connect(\n                \"ws://\" + \n                Config.ROSBRIDGE_SERVER_IP + \n                \":\" +  \n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            );\n        } catch (error) {\n            console.log(\"connection problem\");\n        }\n    }\n\n    componentDidMount(){\n        this.init_connection();\n        this.viewMap();\n    }\n\n    viewMap(){\n        var viewer = new window.ROS2D.Viewer({\n            divID: \"nav_div\",\n            width: 640,\n            height: 480,\n        })\n\n        var NavClient = new window.NAV2D().OccupancyGridClientNav({\n            ros: this.state.ros,\n            rootObject: viewer.scene,\n            viewer: viewer,\n            serverName: \"/move_base\",\n            withOrientation: true,\n        }); \n    }\n\n    render() {\n        return (\n            <div>\n                <div id = \"nav_div\">Viewer</div>\n            </div>\n        )\n    }\n}\n\nexport default Map;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,sBAAsB;AAAC;AAE1C,MAAMC,GAAG,SAASF,SAAS,CAAC;EAMxBG,WAAW,GAAG;IACV,KAAK,EAAE;IAAC,KALZC,KAAK,GAAG;MACJC,GAAG,EAAE;IACT,CAAC;IAIG,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;EAC1C;EAEAC,eAAe,GAAE;IACb,IAAI,CAACL,KAAK,CAACC,GAAG,GAAG,IAAIK,MAAM,CAACC,MAAM,CAACC,GAAG,EAAE,CAAC,CAAC;IAC1CC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,KAAK,CAACC,GAAG,CAAC;IAE3B,IAAI,CAACD,KAAK,CAACC,GAAG,CAACU,EAAE,CAAC,YAAY,EAAE,MAAM;MAClCF,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C,IAAI,CAACE,QAAQ,CAAC;QAACC,SAAS,EAAE;MAAI,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI,CAACb,KAAK,CAACC,GAAG,CAACU,EAAE,CAAC,OAAO,EAAE,MAAM;MAC7BF,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBD,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,IAAI,CAACE,QAAQ,CAAC;QAACC,SAAS,EAAE;MAAK,CAAC,CAAC;;MAEjC;MACAC,UAAU,CAAC,MAAM;QACb,IAAI;UACA,IAAI,CAACd,KAAK,CAACC,GAAG,CAACc,OAAO,CAClB,OAAO,GACPlB,MAAM,CAACmB,mBAAmB,GAC1B,GAAG,GACHnB,MAAM,CAACoB,qBAAqB,GAC5B,EAAE,CACL;QACL,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZT,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACrC;MACJ,CAAC,EAAEb,MAAM,CAACsB,kBAAkB,CAAC;IACjC,CAAC,CAAC;IAEF,IAAI;MACA,IAAI,CAACnB,KAAK,CAACC,GAAG,CAACc,OAAO,CAClB,OAAO,GACPlB,MAAM,CAACmB,mBAAmB,GAC1B,GAAG,GACHnB,MAAM,CAACoB,qBAAqB,GAC5B,EAAE,CACL;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZT,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACrC;EACJ;EAEAU,iBAAiB,GAAE;IACf,IAAI,CAACf,eAAe,EAAE;IACtB,IAAI,CAACH,OAAO,EAAE;EAClB;EAEAA,OAAO,GAAE;IACL,IAAImB,MAAM,GAAG,IAAIf,MAAM,CAACgB,KAAK,CAACC,MAAM,CAAC;MACjCC,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE;IACZ,CAAC,CAAC;IAEF,IAAIC,SAAS,GAAG,IAAIrB,MAAM,CAACsB,KAAK,EAAE,CAACC,sBAAsB,CAAC;MACtD5B,GAAG,EAAE,IAAI,CAACD,KAAK,CAACC,GAAG;MACnB6B,UAAU,EAAET,MAAM,CAACU,KAAK;MACxBV,MAAM,EAAEA,MAAM;MACdW,UAAU,EAAE,YAAY;MACxBC,eAAe,EAAE;IACrB,CAAC,CAAC;EACN;EAEAC,MAAM,GAAG;IACL,oBACI;MAAA,uBACI;QAAK,EAAE,EAAG,SAAS;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAa;MAAA;MAAA;MAAA;IAAA,QAC9B;EAEd;AACJ;AAEA,eAAepC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}