{"ast":null,"code":"var _jsxFileName = \"/home/oben-n/react-ros-robot/src/components/Teleoperation.jsx\";\nimport React, { Component } from \"react\";\nimport { Joystick } from 'react-joystick-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Teleoperation extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.init_connection();\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // window must be used because package is called from index.html\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"here\");\n      console.log(\"connection closed!\");\n      this.setState({\n        connected: false\n      });\n\n      // try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n  handleMove() {\n    console.log(\"handle move\");\n    //create ROS publisher cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros\n    });\n    //create twist message \n\n    //publish the message\n  }\n\n  handleStop() {\n    console.log(\"handle stop\");\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Joystick, {\n        size: 100,\n        sticky: true,\n        baseColor: \"#EEEEEE\",\n        stickColor: \"#BBBBBB\",\n        move: this.handleMove,\n        stop: this.handleStop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Teleoperation;","map":{"version":3,"names":["React","Component","Joystick","Teleoperation","constructor","state","ros","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","Config","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","handleMove","cmd_vel","Topic","handleStop","render"],"sources":["/home/oben-n/react-ros-robot/src/components/Teleoperation.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport { Joystick } from 'react-joystick-component';\n\nclass Teleoperation extends Component {\n    state = {ros: null};\n\n    constructor() {\n        super();\n        this.init_connection();\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros(); // window must be used because package is called from index.html\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established!\");\n            this.setState({connected: true});\n        }); \n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"here\");\n            console.log(\"connection closed!\");\n            this.setState({connected: false});\n\n            // try to reconnect every 3 seconds\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" + \n                        Config.ROSBRIDGE_SERVER_IP + \n                        \":\" +  \n                        Config.ROSBRIDGE_SERVER_PORT +\n                        \"\"\n                    );\n                } catch (error) {\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n        });\n\n        try {\n            this.state.ros.connect(\n                \"ws://\" + \n                Config.ROSBRIDGE_SERVER_IP + \n                \":\" +  \n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            );\n        } catch (error) {\n            console.log(\"connection problem\");\n        }\n    }\n\n    handleMove(){\n        console.log(\"handle move\");\n        //create ROS publisher cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n        });\n        //create twist message \n\n        //publish the message\n    }\n\n    handleStop(){\n        console.log(\"handle stop\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Joystick \n                    size={100} \n                    sticky={true} \n                    baseColor=\"#EEEEEE\" \n                    stickColor=\"#BBBBBB\" \n                    move={this.handleMove} \n                    stop={this.handleStop}>\n                </Joystick>\n            </div>)\n    }\n}\n\nexport default Teleoperation;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,0BAA0B;AAAC;AAEpD,MAAMC,aAAa,SAASF,SAAS,CAAC;EAGlCG,WAAW,GAAG;IACV,KAAK,EAAE;IAAC,KAHZC,KAAK,GAAG;MAACC,GAAG,EAAE;IAAI,CAAC;IAIf,IAAI,CAACC,eAAe,EAAE;EAC1B;EAEAA,eAAe,GAAE;IACb,IAAI,CAACF,KAAK,CAACC,GAAG,GAAG,IAAIE,MAAM,CAACC,MAAM,CAACC,GAAG,EAAE,CAAC,CAAC;IAC1CC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,KAAK,CAACC,GAAG,CAAC;IAE3B,IAAI,CAACD,KAAK,CAACC,GAAG,CAACO,EAAE,CAAC,YAAY,EAAE,MAAM;MAClCF,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC,IAAI,CAACE,QAAQ,CAAC;QAACC,SAAS,EAAE;MAAI,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI,CAACV,KAAK,CAACC,GAAG,CAACO,EAAE,CAAC,OAAO,EAAE,MAAM;MAC7BF,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBD,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,IAAI,CAACE,QAAQ,CAAC;QAACC,SAAS,EAAE;MAAK,CAAC,CAAC;;MAEjC;MACAC,UAAU,CAAC,MAAM;QACb,IAAI;UACA,IAAI,CAACX,KAAK,CAACC,GAAG,CAACW,OAAO,CAClB,OAAO,GACPC,MAAM,CAACC,mBAAmB,GAC1B,GAAG,GACHD,MAAM,CAACE,qBAAqB,GAC5B,EAAE,CACL;QACL,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZV,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACrC;MACJ,CAAC,EAAEM,MAAM,CAACI,kBAAkB,CAAC;IACjC,CAAC,CAAC;IAEF,IAAI;MACA,IAAI,CAACjB,KAAK,CAACC,GAAG,CAACW,OAAO,CAClB,OAAO,GACPC,MAAM,CAACC,mBAAmB,GAC1B,GAAG,GACHD,MAAM,CAACE,qBAAqB,GAC5B,EAAE,CACL;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZV,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACrC;EACJ;EAEAW,UAAU,GAAE;IACRZ,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1B;IACA,IAAIY,OAAO,GAAG,IAAIhB,MAAM,CAACC,MAAM,CAACgB,KAAK,CAAC;MAClCnB,GAAG,EAAE,IAAI,CAACD,KAAK,CAACC;IACpB,CAAC,CAAC;IACF;;IAEA;EACJ;;EAEAoB,UAAU,GAAE;IACRf,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC9B;EAGAe,MAAM,GAAG;IACL,oBACI;MAAA,uBACI,QAAC,QAAQ;QACL,IAAI,EAAE,GAAI;QACV,MAAM,EAAE,IAAK;QACb,SAAS,EAAC,SAAS;QACnB,UAAU,EAAC,SAAS;QACpB,IAAI,EAAE,IAAI,CAACJ,UAAW;QACtB,IAAI,EAAE,IAAI,CAACG;MAAW;QAAA;QAAA;QAAA;MAAA;IACf;MAAA;MAAA;MAAA;IAAA,QACT;EACd;AACJ;AAEA,eAAevB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}