{"ast":null,"code":"/**\n * @fileoverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\n\nvar ServiceResponse = require('./ServiceResponse');\nvar ServiceRequest = require('./ServiceRequest');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * A ROS service client.\n *\n * @constructor\n * @params options - possible keys include:\n *   * ros - the ROSLIB.Ros connection handle\n *   * name - the service name, like /add_two_ints\n *   * serviceType - the service type, like 'rospy_tutorials/AddTwoInts'\n */\nfunction Service(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.name = options.name;\n  this.serviceType = options.serviceType;\n  this.isAdvertised = false;\n  this._serviceCallback = null;\n}\nService.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * Calls the service. Returns the service response in the\n * callback. Does nothing if this service is currently advertised.\n *\n * @param request - the ROSLIB.ServiceRequest to send\n * @param callback - function with params:\n *   * response - the response from the service request\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nService.prototype.callService = function (request, callback, failedCallback) {\n  if (this.isAdvertised) {\n    return;\n  }\n  var serviceCallId = 'call_service:' + this.name + ':' + ++this.ros.idCounter;\n  if (callback || failedCallback) {\n    this.ros.once(serviceCallId, function (message) {\n      if (message.result !== undefined && message.result === false) {\n        if (typeof failedCallback === 'function') {\n          failedCallback(message.values);\n        }\n      } else if (typeof callback === 'function') {\n        callback(new ServiceResponse(message.values));\n      }\n    });\n  }\n  var call = {\n    op: 'call_service',\n    id: serviceCallId,\n    service: this.name,\n    type: this.serviceType,\n    args: request\n  };\n  this.ros.callOnConnection(call);\n};\n\n/**\n * Advertise the service. This turns the Service object from a client\n * into a server. The callback will be called with every request\n * that's made on this service.\n *\n * @param callback - This works similarly to the callback for a C++ service and should take the following params:\n *   * request - the service request\n *   * response - an empty dictionary. Take care not to overwrite this. Instead, only modify the values within.\n *   It should return true if the service has finished successfully,\n *   i.e. without any fatal errors.\n */\nService.prototype.advertise = function (callback) {\n  if (this.isAdvertised || typeof callback !== 'function') {\n    return;\n  }\n  this._serviceCallback = callback;\n  this.ros.on(this.name, this._serviceResponse.bind(this));\n  this.ros.callOnConnection({\n    op: 'advertise_service',\n    type: this.serviceType,\n    service: this.name\n  });\n  this.isAdvertised = true;\n};\nService.prototype.unadvertise = function () {\n  if (!this.isAdvertised) {\n    return;\n  }\n  this.ros.callOnConnection({\n    op: 'unadvertise_service',\n    service: this.name\n  });\n  this.isAdvertised = false;\n};\nService.prototype._serviceResponse = function (rosbridgeRequest) {\n  var response = {};\n  var success = this._serviceCallback(rosbridgeRequest.args, response);\n  var call = {\n    op: 'service_response',\n    service: this.name,\n    values: new ServiceResponse(response),\n    result: success\n  };\n  if (rosbridgeRequest.id) {\n    call.id = rosbridgeRequest.id;\n  }\n  this.ros.callOnConnection(call);\n};\nmodule.exports = Service;","map":{"version":3,"names":["ServiceResponse","require","ServiceRequest","EventEmitter2","Service","options","ros","name","serviceType","isAdvertised","_serviceCallback","prototype","__proto__","callService","request","callback","failedCallback","serviceCallId","idCounter","once","message","result","undefined","values","call","op","id","service","type","args","callOnConnection","advertise","on","_serviceResponse","bind","unadvertise","rosbridgeRequest","response","success","module","exports"],"sources":["/home/oben-n/react-ros-robot/node_modules/roslib/src/core/Service.js"],"sourcesContent":["/**\n * @fileoverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\n\nvar ServiceResponse = require('./ServiceResponse');\nvar ServiceRequest = require('./ServiceRequest');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * A ROS service client.\n *\n * @constructor\n * @params options - possible keys include:\n *   * ros - the ROSLIB.Ros connection handle\n *   * name - the service name, like /add_two_ints\n *   * serviceType - the service type, like 'rospy_tutorials/AddTwoInts'\n */\nfunction Service(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.name = options.name;\n  this.serviceType = options.serviceType;\n  this.isAdvertised = false;\n\n  this._serviceCallback = null;\n}\nService.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * Calls the service. Returns the service response in the\n * callback. Does nothing if this service is currently advertised.\n *\n * @param request - the ROSLIB.ServiceRequest to send\n * @param callback - function with params:\n *   * response - the response from the service request\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nService.prototype.callService = function(request, callback, failedCallback) {\n  if (this.isAdvertised) {\n    return;\n  }\n\n  var serviceCallId = 'call_service:' + this.name + ':' + (++this.ros.idCounter);\n\n  if (callback || failedCallback) {\n    this.ros.once(serviceCallId, function(message) {\n      if (message.result !== undefined && message.result === false) {\n        if (typeof failedCallback === 'function') {\n          failedCallback(message.values);\n        }\n      } else if (typeof callback === 'function') {\n        callback(new ServiceResponse(message.values));\n      }\n    });\n  }\n\n  var call = {\n    op : 'call_service',\n    id : serviceCallId,\n    service : this.name,\n    type: this.serviceType,\n    args : request\n  };\n  this.ros.callOnConnection(call);\n};\n\n/**\n * Advertise the service. This turns the Service object from a client\n * into a server. The callback will be called with every request\n * that's made on this service.\n *\n * @param callback - This works similarly to the callback for a C++ service and should take the following params:\n *   * request - the service request\n *   * response - an empty dictionary. Take care not to overwrite this. Instead, only modify the values within.\n *   It should return true if the service has finished successfully,\n *   i.e. without any fatal errors.\n */\nService.prototype.advertise = function(callback) {\n  if (this.isAdvertised || typeof callback !== 'function') {\n    return;\n  }\n\n  this._serviceCallback = callback;\n  this.ros.on(this.name, this._serviceResponse.bind(this));\n  this.ros.callOnConnection({\n    op: 'advertise_service',\n    type: this.serviceType,\n    service: this.name\n  });\n  this.isAdvertised = true;\n};\n\nService.prototype.unadvertise = function() {\n  if (!this.isAdvertised) {\n    return;\n  }\n  this.ros.callOnConnection({\n    op: 'unadvertise_service',\n    service: this.name\n  });\n  this.isAdvertised = false;\n};\n\nService.prototype._serviceResponse = function(rosbridgeRequest) {\n  var response = {};\n  var success = this._serviceCallback(rosbridgeRequest.args, response);\n\n  var call = {\n    op: 'service_response',\n    service: this.name,\n    values: new ServiceResponse(response),\n    result: success\n  };\n\n  if (rosbridgeRequest.id) {\n    call.id = rosbridgeRequest.id;\n  }\n\n  this.ros.callOnConnection(call);\n};\n\nmodule.exports = Service;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,IAAIA,eAAe,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAClD,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIE,aAAa,GAAGF,OAAO,CAAC,eAAe,CAAC,CAACE,aAAa;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAO,CAACC,OAAO,EAAE;EACxBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAI,CAACC,GAAG,GAAGD,OAAO,CAACC,GAAG;EACtB,IAAI,CAACC,IAAI,GAAGF,OAAO,CAACE,IAAI;EACxB,IAAI,CAACC,WAAW,GAAGH,OAAO,CAACG,WAAW;EACtC,IAAI,CAACC,YAAY,GAAG,KAAK;EAEzB,IAAI,CAACC,gBAAgB,GAAG,IAAI;AAC9B;AACAN,OAAO,CAACO,SAAS,CAACC,SAAS,GAAGT,aAAa,CAACQ,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,OAAO,CAACO,SAAS,CAACE,WAAW,GAAG,UAASC,OAAO,EAAEC,QAAQ,EAAEC,cAAc,EAAE;EAC1E,IAAI,IAAI,CAACP,YAAY,EAAE;IACrB;EACF;EAEA,IAAIQ,aAAa,GAAG,eAAe,GAAG,IAAI,CAACV,IAAI,GAAG,GAAG,GAAI,EAAE,IAAI,CAACD,GAAG,CAACY,SAAU;EAE9E,IAAIH,QAAQ,IAAIC,cAAc,EAAE;IAC9B,IAAI,CAACV,GAAG,CAACa,IAAI,CAACF,aAAa,EAAE,UAASG,OAAO,EAAE;MAC7C,IAAIA,OAAO,CAACC,MAAM,KAAKC,SAAS,IAAIF,OAAO,CAACC,MAAM,KAAK,KAAK,EAAE;QAC5D,IAAI,OAAOL,cAAc,KAAK,UAAU,EAAE;UACxCA,cAAc,CAACI,OAAO,CAACG,MAAM,CAAC;QAChC;MACF,CAAC,MAAM,IAAI,OAAOR,QAAQ,KAAK,UAAU,EAAE;QACzCA,QAAQ,CAAC,IAAIf,eAAe,CAACoB,OAAO,CAACG,MAAM,CAAC,CAAC;MAC/C;IACF,CAAC,CAAC;EACJ;EAEA,IAAIC,IAAI,GAAG;IACTC,EAAE,EAAG,cAAc;IACnBC,EAAE,EAAGT,aAAa;IAClBU,OAAO,EAAG,IAAI,CAACpB,IAAI;IACnBqB,IAAI,EAAE,IAAI,CAACpB,WAAW;IACtBqB,IAAI,EAAGf;EACT,CAAC;EACD,IAAI,CAACR,GAAG,CAACwB,gBAAgB,CAACN,IAAI,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApB,OAAO,CAACO,SAAS,CAACoB,SAAS,GAAG,UAAShB,QAAQ,EAAE;EAC/C,IAAI,IAAI,CAACN,YAAY,IAAI,OAAOM,QAAQ,KAAK,UAAU,EAAE;IACvD;EACF;EAEA,IAAI,CAACL,gBAAgB,GAAGK,QAAQ;EAChC,IAAI,CAACT,GAAG,CAAC0B,EAAE,CAAC,IAAI,CAACzB,IAAI,EAAE,IAAI,CAAC0B,gBAAgB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACxD,IAAI,CAAC5B,GAAG,CAACwB,gBAAgB,CAAC;IACxBL,EAAE,EAAE,mBAAmB;IACvBG,IAAI,EAAE,IAAI,CAACpB,WAAW;IACtBmB,OAAO,EAAE,IAAI,CAACpB;EAChB,CAAC,CAAC;EACF,IAAI,CAACE,YAAY,GAAG,IAAI;AAC1B,CAAC;AAEDL,OAAO,CAACO,SAAS,CAACwB,WAAW,GAAG,YAAW;EACzC,IAAI,CAAC,IAAI,CAAC1B,YAAY,EAAE;IACtB;EACF;EACA,IAAI,CAACH,GAAG,CAACwB,gBAAgB,CAAC;IACxBL,EAAE,EAAE,qBAAqB;IACzBE,OAAO,EAAE,IAAI,CAACpB;EAChB,CAAC,CAAC;EACF,IAAI,CAACE,YAAY,GAAG,KAAK;AAC3B,CAAC;AAEDL,OAAO,CAACO,SAAS,CAACsB,gBAAgB,GAAG,UAASG,gBAAgB,EAAE;EAC9D,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,OAAO,GAAG,IAAI,CAAC5B,gBAAgB,CAAC0B,gBAAgB,CAACP,IAAI,EAAEQ,QAAQ,CAAC;EAEpE,IAAIb,IAAI,GAAG;IACTC,EAAE,EAAE,kBAAkB;IACtBE,OAAO,EAAE,IAAI,CAACpB,IAAI;IAClBgB,MAAM,EAAE,IAAIvB,eAAe,CAACqC,QAAQ,CAAC;IACrChB,MAAM,EAAEiB;EACV,CAAC;EAED,IAAIF,gBAAgB,CAACV,EAAE,EAAE;IACvBF,IAAI,CAACE,EAAE,GAAGU,gBAAgB,CAACV,EAAE;EAC/B;EAEA,IAAI,CAACpB,GAAG,CAACwB,gBAAgB,CAACN,IAAI,CAAC;AACjC,CAAC;AAEDe,MAAM,CAACC,OAAO,GAAGpC,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}