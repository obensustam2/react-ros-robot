{"ast":null,"code":"/**\n * @fileOverview \n * @author Benjamin Pitzer - ben.pitzer@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar Pose = require('../math/Pose');\nvar Vector3 = require('../math/Vector3');\nvar Quaternion = require('../math/Quaternion');\nvar UrdfCylinder = require('./UrdfCylinder');\nvar UrdfBox = require('./UrdfBox');\nvar UrdfMaterial = require('./UrdfMaterial');\nvar UrdfMesh = require('./UrdfMesh');\nvar UrdfSphere = require('./UrdfSphere');\n\n/**\n * A Visual element in a URDF.\n *\n * @constructor\n * @param options - object with following keys:\n *  * xml - the XML element to parse\n */\nfunction UrdfVisual(options) {\n  var xml = options.xml;\n  this.origin = null;\n  this.geometry = null;\n  this.material = null;\n  this.name = options.xml.getAttribute('name');\n\n  // Origin\n  var origins = xml.getElementsByTagName('origin');\n  if (origins.length === 0) {\n    // use the identity as the default\n    this.origin = new Pose();\n  } else {\n    // Check the XYZ\n    var xyz = origins[0].getAttribute('xyz');\n    var position = new Vector3();\n    if (xyz) {\n      xyz = xyz.split(' ');\n      position = new Vector3({\n        x: parseFloat(xyz[0]),\n        y: parseFloat(xyz[1]),\n        z: parseFloat(xyz[2])\n      });\n    }\n\n    // Check the RPY\n    var rpy = origins[0].getAttribute('rpy');\n    var orientation = new Quaternion();\n    if (rpy) {\n      rpy = rpy.split(' ');\n      // Convert from RPY\n      var roll = parseFloat(rpy[0]);\n      var pitch = parseFloat(rpy[1]);\n      var yaw = parseFloat(rpy[2]);\n      var phi = roll / 2.0;\n      var the = pitch / 2.0;\n      var psi = yaw / 2.0;\n      var x = Math.sin(phi) * Math.cos(the) * Math.cos(psi) - Math.cos(phi) * Math.sin(the) * Math.sin(psi);\n      var y = Math.cos(phi) * Math.sin(the) * Math.cos(psi) + Math.sin(phi) * Math.cos(the) * Math.sin(psi);\n      var z = Math.cos(phi) * Math.cos(the) * Math.sin(psi) - Math.sin(phi) * Math.sin(the) * Math.cos(psi);\n      var w = Math.cos(phi) * Math.cos(the) * Math.cos(psi) + Math.sin(phi) * Math.sin(the) * Math.sin(psi);\n      orientation = new Quaternion({\n        x: x,\n        y: y,\n        z: z,\n        w: w\n      });\n      orientation.normalize();\n    }\n    this.origin = new Pose({\n      position: position,\n      orientation: orientation\n    });\n  }\n\n  // Geometry\n  var geoms = xml.getElementsByTagName('geometry');\n  if (geoms.length > 0) {\n    var geom = geoms[0];\n    var shape = null;\n    // Check for the shape\n    for (var i = 0; i < geom.childNodes.length; i++) {\n      var node = geom.childNodes[i];\n      if (node.nodeType === 1) {\n        shape = node;\n        break;\n      }\n    }\n    // Check the type\n    var type = shape.nodeName;\n    if (type === 'sphere') {\n      this.geometry = new UrdfSphere({\n        xml: shape\n      });\n    } else if (type === 'box') {\n      this.geometry = new UrdfBox({\n        xml: shape\n      });\n    } else if (type === 'cylinder') {\n      this.geometry = new UrdfCylinder({\n        xml: shape\n      });\n    } else if (type === 'mesh') {\n      this.geometry = new UrdfMesh({\n        xml: shape\n      });\n    } else {\n      console.warn('Unknown geometry type ' + type);\n    }\n  }\n\n  // Material\n  var materials = xml.getElementsByTagName('material');\n  if (materials.length > 0) {\n    this.material = new UrdfMaterial({\n      xml: materials[0]\n    });\n  }\n}\nmodule.exports = UrdfVisual;","map":{"version":3,"names":["Pose","require","Vector3","Quaternion","UrdfCylinder","UrdfBox","UrdfMaterial","UrdfMesh","UrdfSphere","UrdfVisual","options","xml","origin","geometry","material","name","getAttribute","origins","getElementsByTagName","length","xyz","position","split","x","parseFloat","y","z","rpy","orientation","roll","pitch","yaw","phi","the","psi","Math","sin","cos","w","normalize","geoms","geom","shape","i","childNodes","node","nodeType","type","nodeName","console","warn","materials","module","exports"],"sources":["/home/oben-n/react-ros-robot/node_modules/roslib/src/urdf/UrdfVisual.js"],"sourcesContent":["/**\n * @fileOverview \n * @author Benjamin Pitzer - ben.pitzer@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar Pose = require('../math/Pose');\nvar Vector3 = require('../math/Vector3');\nvar Quaternion = require('../math/Quaternion');\n\nvar UrdfCylinder = require('./UrdfCylinder');\nvar UrdfBox = require('./UrdfBox');\nvar UrdfMaterial = require('./UrdfMaterial');\nvar UrdfMesh = require('./UrdfMesh');\nvar UrdfSphere = require('./UrdfSphere');\n\n/**\n * A Visual element in a URDF.\n *\n * @constructor\n * @param options - object with following keys:\n *  * xml - the XML element to parse\n */\nfunction UrdfVisual(options) {\n  var xml = options.xml;\n  this.origin = null;\n  this.geometry = null;\n  this.material = null;\n\n  this.name = options.xml.getAttribute('name');\n\n  // Origin\n  var origins = xml.getElementsByTagName('origin');\n  if (origins.length === 0) {\n    // use the identity as the default\n    this.origin = new Pose();\n  } else {\n    // Check the XYZ\n    var xyz = origins[0].getAttribute('xyz');\n    var position = new Vector3();\n    if (xyz) {\n      xyz = xyz.split(' ');\n      position = new Vector3({\n        x : parseFloat(xyz[0]),\n        y : parseFloat(xyz[1]),\n        z : parseFloat(xyz[2])\n      });\n    }\n\n    // Check the RPY\n    var rpy = origins[0].getAttribute('rpy');\n    var orientation = new Quaternion();\n    if (rpy) {\n      rpy = rpy.split(' ');\n      // Convert from RPY\n      var roll = parseFloat(rpy[0]);\n      var pitch = parseFloat(rpy[1]);\n      var yaw = parseFloat(rpy[2]);\n      var phi = roll / 2.0;\n      var the = pitch / 2.0;\n      var psi = yaw / 2.0;\n      var x = Math.sin(phi) * Math.cos(the) * Math.cos(psi) - Math.cos(phi) * Math.sin(the)\n          * Math.sin(psi);\n      var y = Math.cos(phi) * Math.sin(the) * Math.cos(psi) + Math.sin(phi) * Math.cos(the)\n          * Math.sin(psi);\n      var z = Math.cos(phi) * Math.cos(the) * Math.sin(psi) - Math.sin(phi) * Math.sin(the)\n          * Math.cos(psi);\n      var w = Math.cos(phi) * Math.cos(the) * Math.cos(psi) + Math.sin(phi) * Math.sin(the)\n          * Math.sin(psi);\n\n      orientation = new Quaternion({\n        x : x,\n        y : y,\n        z : z,\n        w : w\n      });\n      orientation.normalize();\n    }\n    this.origin = new Pose({\n      position : position,\n      orientation : orientation\n    });\n  }\n\n  // Geometry\n  var geoms = xml.getElementsByTagName('geometry');\n  if (geoms.length > 0) {\n    var geom = geoms[0];\n    var shape = null;\n    // Check for the shape\n    for (var i = 0; i < geom.childNodes.length; i++) {\n      var node = geom.childNodes[i];\n      if (node.nodeType === 1) {\n        shape = node;\n        break;\n      }\n    }\n    // Check the type\n    var type = shape.nodeName;\n    if (type === 'sphere') {\n      this.geometry = new UrdfSphere({\n        xml : shape\n      });\n    } else if (type === 'box') {\n      this.geometry = new UrdfBox({\n        xml : shape\n      });\n    } else if (type === 'cylinder') {\n      this.geometry = new UrdfCylinder({\n        xml : shape\n      });\n    } else if (type === 'mesh') {\n      this.geometry = new UrdfMesh({\n        xml : shape\n      });\n    } else {\n      console.warn('Unknown geometry type ' + type);\n    }\n  }\n\n  // Material\n  var materials = xml.getElementsByTagName('material');\n  if (materials.length > 0) {\n    this.material = new UrdfMaterial({\n      xml : materials[0]\n    });\n  }\n}\n\nmodule.exports = UrdfVisual;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}