{"ast":null,"code":"/**\n * @fileoverview\n * @author David Gossow - dgossow@willowgarage.com\n */\n\n/**\n * A Quaternion.\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * x - the x value\n *   * y - the y value\n *   * z - the z value\n *   * w - the w value\n */\nfunction Quaternion(options) {\n  options = options || {};\n  this.x = options.x || 0;\n  this.y = options.y || 0;\n  this.z = options.z || 0;\n  this.w = typeof options.w === 'number' ? options.w : 1;\n}\n\n/**\n * Perform a conjugation on this quaternion.\n */\nQuaternion.prototype.conjugate = function () {\n  this.x *= -1;\n  this.y *= -1;\n  this.z *= -1;\n};\n\n/**\n * Return the norm of this quaternion.\n */\nQuaternion.prototype.norm = function () {\n  return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n};\n\n/**\n * Perform a normalization on this quaternion.\n */\nQuaternion.prototype.normalize = function () {\n  var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  if (l === 0) {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 1;\n  } else {\n    l = 1 / l;\n    this.x = this.x * l;\n    this.y = this.y * l;\n    this.z = this.z * l;\n    this.w = this.w * l;\n  }\n};\n\n/**\n * Convert this quaternion into its inverse.\n */\nQuaternion.prototype.invert = function () {\n  this.conjugate();\n  this.normalize();\n};\n\n/**\n * Set the values of this quaternion to the product of itself and the given quaternion.\n *\n * @param q the quaternion to multiply with\n */\nQuaternion.prototype.multiply = function (q) {\n  var newX = this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x;\n  var newY = -this.x * q.z + this.y * q.w + this.z * q.x + this.w * q.y;\n  var newZ = this.x * q.y - this.y * q.x + this.z * q.w + this.w * q.z;\n  var newW = -this.x * q.x - this.y * q.y - this.z * q.z + this.w * q.w;\n  this.x = newX;\n  this.y = newY;\n  this.z = newZ;\n  this.w = newW;\n};\n\n/**\n * Clone a copy of this quaternion.\n *\n * @returns the cloned quaternion\n */\nQuaternion.prototype.clone = function () {\n  return new Quaternion(this);\n};\nmodule.exports = Quaternion;","map":{"version":3,"names":["Quaternion","options","x","y","z","w","prototype","conjugate","norm","Math","sqrt","normalize","l","invert","multiply","q","newX","newY","newZ","newW","clone","module","exports"],"sources":["/home/oben-n/react-ros-robot/node_modules/roslib/src/math/Quaternion.js"],"sourcesContent":["/**\n * @fileoverview\n * @author David Gossow - dgossow@willowgarage.com\n */\n\n/**\n * A Quaternion.\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * x - the x value\n *   * y - the y value\n *   * z - the z value\n *   * w - the w value\n */\nfunction Quaternion(options) {\n  options = options || {};\n  this.x = options.x || 0;\n  this.y = options.y || 0;\n  this.z = options.z || 0;\n  this.w = (typeof options.w === 'number') ? options.w : 1;\n}\n\n/**\n * Perform a conjugation on this quaternion.\n */\nQuaternion.prototype.conjugate = function() {\n  this.x *= -1;\n  this.y *= -1;\n  this.z *= -1;\n};\n\n/**\n * Return the norm of this quaternion.\n */\nQuaternion.prototype.norm = function() {\n  return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n};\n\n/**\n * Perform a normalization on this quaternion.\n */\nQuaternion.prototype.normalize = function() {\n  var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  if (l === 0) {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 1;\n  } else {\n    l = 1 / l;\n    this.x = this.x * l;\n    this.y = this.y * l;\n    this.z = this.z * l;\n    this.w = this.w * l;\n  }\n};\n\n/**\n * Convert this quaternion into its inverse.\n */\nQuaternion.prototype.invert = function() {\n  this.conjugate();\n  this.normalize();\n};\n\n/**\n * Set the values of this quaternion to the product of itself and the given quaternion.\n *\n * @param q the quaternion to multiply with\n */\nQuaternion.prototype.multiply = function(q) {\n  var newX = this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x;\n  var newY = -this.x * q.z + this.y * q.w + this.z * q.x + this.w * q.y;\n  var newZ = this.x * q.y - this.y * q.x + this.z * q.w + this.w * q.z;\n  var newW = -this.x * q.x - this.y * q.y - this.z * q.z + this.w * q.w;\n  this.x = newX;\n  this.y = newY;\n  this.z = newZ;\n  this.w = newW;\n};\n\n/**\n * Clone a copy of this quaternion.\n *\n * @returns the cloned quaternion\n */\nQuaternion.prototype.clone = function() {\n  return new Quaternion(this);\n};\n\nmodule.exports = Quaternion;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}