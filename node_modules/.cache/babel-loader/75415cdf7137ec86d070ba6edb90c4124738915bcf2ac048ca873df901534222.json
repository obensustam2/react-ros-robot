{"ast":null,"code":"/**\n * @fileoverview\n * @author David Gossow - dgossow@willowgarage.com\n */\n\nvar ActionClient = require('../actionlib/ActionClient');\nvar Goal = require('../actionlib/Goal');\nvar Service = require('../core/Service.js');\nvar ServiceRequest = require('../core/ServiceRequest.js');\nvar Topic = require('../core/Topic.js');\nvar Transform = require('../math/Transform');\n\n/**\n * A TF Client that listens to TFs from tf2_web_republisher.\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * fixedFrame - the fixed frame, like /base_link\n *   * angularThres - the angular threshold for the TF republisher\n *   * transThres - the translation threshold for the TF republisher\n *   * rate - the rate for the TF republisher\n *   * updateDelay - the time (in ms) to wait after a new subscription\n *                   to update the TF republisher's list of TFs\n *   * topicTimeout - the timeout parameter for the TF republisher\n *   * serverName (optional) - the name of the tf2_web_republisher server\n *   * repubServiceName (optional) - the name of the republish_tfs service (non groovy compatibility mode only)\n *   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t default: '/republish_tfs'\n */\nfunction TFClient(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.fixedFrame = options.fixedFrame || '/base_link';\n  this.angularThres = options.angularThres || 2.0;\n  this.transThres = options.transThres || 0.01;\n  this.rate = options.rate || 10.0;\n  this.updateDelay = options.updateDelay || 50;\n  var seconds = options.topicTimeout || 2.0;\n  var secs = Math.floor(seconds);\n  var nsecs = Math.floor((seconds - secs) * 1000000000);\n  this.topicTimeout = {\n    secs: secs,\n    nsecs: nsecs\n  };\n  this.serverName = options.serverName || '/tf2_web_republisher';\n  this.repubServiceName = options.repubServiceName || '/republish_tfs';\n  this.currentGoal = false;\n  this.currentTopic = false;\n  this.frameInfos = {};\n  this.republisherUpdateRequested = false;\n  this._subscribeCB = null;\n  this._isDisposed = false;\n\n  // Create an Action client\n  this.actionClient = new ActionClient({\n    ros: options.ros,\n    serverName: this.serverName,\n    actionName: 'tf2_web_republisher/TFSubscriptionAction',\n    omitStatus: true,\n    omitResult: true\n  });\n\n  // Create a Service client\n  this.serviceClient = new Service({\n    ros: options.ros,\n    name: this.repubServiceName,\n    serviceType: 'tf2_web_republisher/RepublishTFs'\n  });\n}\n\n/**\n * Process the incoming TF message and send them out using the callback\n * functions.\n *\n * @param tf - the TF message from the server\n */\nTFClient.prototype.processTFArray = function (tf) {\n  var that = this;\n  tf.transforms.forEach(function (transform) {\n    var frameID = transform.child_frame_id;\n    if (frameID[0] === '/') {\n      frameID = frameID.substring(1);\n    }\n    var info = this.frameInfos[frameID];\n    if (info) {\n      info.transform = new Transform({\n        translation: transform.transform.translation,\n        rotation: transform.transform.rotation\n      });\n      info.cbs.forEach(function (cb) {\n        cb(info.transform);\n      });\n    }\n  }, this);\n};\n\n/**\n * Create and send a new goal (or service request) to the tf2_web_republisher\n * based on the current list of TFs.\n */\nTFClient.prototype.updateGoal = function () {\n  var goalMessage = {\n    source_frames: Object.keys(this.frameInfos),\n    target_frame: this.fixedFrame,\n    angular_thres: this.angularThres,\n    trans_thres: this.transThres,\n    rate: this.rate\n  };\n\n  // if we're running in groovy compatibility mode (the default)\n  // then use the action interface to tf2_web_republisher\n  if (this.ros.groovyCompatibility) {\n    if (this.currentGoal) {\n      this.currentGoal.cancel();\n    }\n    this.currentGoal = new Goal({\n      actionClient: this.actionClient,\n      goalMessage: goalMessage\n    });\n    this.currentGoal.on('feedback', this.processTFArray.bind(this));\n    this.currentGoal.send();\n  } else {\n    // otherwise, use the service interface\n    // The service interface has the same parameters as the action,\n    // plus the timeout\n    goalMessage.timeout = this.topicTimeout;\n    var request = new ServiceRequest(goalMessage);\n    this.serviceClient.callService(request, this.processResponse.bind(this));\n  }\n  this.republisherUpdateRequested = false;\n};\n\n/**\n * Process the service response and subscribe to the tf republisher\n * topic\n *\n * @param response the service response containing the topic name\n */\nTFClient.prototype.processResponse = function (response) {\n  // Do not setup a topic subscription if already disposed. Prevents a race condition where\n  // The dispose() function is called before the service call receives a response.\n  if (this._isDisposed) {\n    return;\n  }\n\n  // if we subscribed to a topic before, unsubscribe so\n  // the republisher stops publishing it\n  if (this.currentTopic) {\n    this.currentTopic.unsubscribe(this._subscribeCB);\n  }\n  this.currentTopic = new Topic({\n    ros: this.ros,\n    name: response.topic_name,\n    messageType: 'tf2_web_republisher/TFArray'\n  });\n  this._subscribeCB = this.processTFArray.bind(this);\n  this.currentTopic.subscribe(this._subscribeCB);\n};\n\n/**\n * Subscribe to the given TF frame.\n *\n * @param frameID - the TF frame to subscribe to\n * @param callback - function with params:\n *   * transform - the transform data\n */\nTFClient.prototype.subscribe = function (frameID, callback) {\n  // remove leading slash, if it's there\n  if (frameID[0] === '/') {\n    frameID = frameID.substring(1);\n  }\n  // if there is no callback registered for the given frame, create emtpy callback list\n  if (!this.frameInfos[frameID]) {\n    this.frameInfos[frameID] = {\n      cbs: []\n    };\n    if (!this.republisherUpdateRequested) {\n      setTimeout(this.updateGoal.bind(this), this.updateDelay);\n      this.republisherUpdateRequested = true;\n    }\n  }\n  // if we already have a transform, call back immediately\n  else if (this.frameInfos[frameID].transform) {\n    callback(this.frameInfos[frameID].transform);\n  }\n  this.frameInfos[frameID].cbs.push(callback);\n};\n\n/**\n * Unsubscribe from the given TF frame.\n *\n * @param frameID - the TF frame to unsubscribe from\n * @param callback - the callback function to remove\n */\nTFClient.prototype.unsubscribe = function (frameID, callback) {\n  // remove leading slash, if it's there\n  if (frameID[0] === '/') {\n    frameID = frameID.substring(1);\n  }\n  var info = this.frameInfos[frameID];\n  for (var cbs = info && info.cbs || [], idx = cbs.length; idx--;) {\n    if (cbs[idx] === callback) {\n      cbs.splice(idx, 1);\n    }\n  }\n  if (!callback || cbs.length === 0) {\n    delete this.frameInfos[frameID];\n  }\n};\n\n/**\n * Unsubscribe and unadvertise all topics associated with this TFClient.\n */\nTFClient.prototype.dispose = function () {\n  this._isDisposed = true;\n  this.actionClient.dispose();\n  if (this.currentTopic) {\n    this.currentTopic.unsubscribe(this._subscribeCB);\n  }\n};\nmodule.exports = TFClient;","map":{"version":3,"names":["ActionClient","require","Goal","Service","ServiceRequest","Topic","Transform","TFClient","options","ros","fixedFrame","angularThres","transThres","rate","updateDelay","seconds","topicTimeout","secs","Math","floor","nsecs","serverName","repubServiceName","currentGoal","currentTopic","frameInfos","republisherUpdateRequested","_subscribeCB","_isDisposed","actionClient","actionName","omitStatus","omitResult","serviceClient","name","serviceType","prototype","processTFArray","tf","that","transforms","forEach","transform","frameID","child_frame_id","substring","info","translation","rotation","cbs","cb","updateGoal","goalMessage","source_frames","Object","keys","target_frame","angular_thres","trans_thres","groovyCompatibility","cancel","on","bind","send","timeout","request","callService","processResponse","response","unsubscribe","topic_name","messageType","subscribe","callback","setTimeout","push","idx","length","splice","dispose","module","exports"],"sources":["/home/oben-n/react-ros-robot/node_modules/roslib/src/tf/TFClient.js"],"sourcesContent":["/**\n * @fileoverview\n * @author David Gossow - dgossow@willowgarage.com\n */\n\nvar ActionClient = require('../actionlib/ActionClient');\nvar Goal = require('../actionlib/Goal');\n\nvar Service = require('../core/Service.js');\nvar ServiceRequest = require('../core/ServiceRequest.js');\nvar Topic = require('../core/Topic.js');\n\nvar Transform = require('../math/Transform');\n\n/**\n * A TF Client that listens to TFs from tf2_web_republisher.\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * fixedFrame - the fixed frame, like /base_link\n *   * angularThres - the angular threshold for the TF republisher\n *   * transThres - the translation threshold for the TF republisher\n *   * rate - the rate for the TF republisher\n *   * updateDelay - the time (in ms) to wait after a new subscription\n *                   to update the TF republisher's list of TFs\n *   * topicTimeout - the timeout parameter for the TF republisher\n *   * serverName (optional) - the name of the tf2_web_republisher server\n *   * repubServiceName (optional) - the name of the republish_tfs service (non groovy compatibility mode only)\n *   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t default: '/republish_tfs'\n */\nfunction TFClient(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.fixedFrame = options.fixedFrame || '/base_link';\n  this.angularThres = options.angularThres || 2.0;\n  this.transThres = options.transThres || 0.01;\n  this.rate = options.rate || 10.0;\n  this.updateDelay = options.updateDelay || 50;\n  var seconds = options.topicTimeout || 2.0;\n  var secs = Math.floor(seconds);\n  var nsecs = Math.floor((seconds - secs) * 1000000000);\n  this.topicTimeout = {\n    secs: secs,\n    nsecs: nsecs\n  };\n  this.serverName = options.serverName || '/tf2_web_republisher';\n  this.repubServiceName = options.repubServiceName || '/republish_tfs';\n\n  this.currentGoal = false;\n  this.currentTopic = false;\n  this.frameInfos = {};\n  this.republisherUpdateRequested = false;\n  this._subscribeCB = null;\n  this._isDisposed = false;\n\n  // Create an Action client\n  this.actionClient = new ActionClient({\n    ros : options.ros,\n    serverName : this.serverName,\n    actionName : 'tf2_web_republisher/TFSubscriptionAction',\n    omitStatus : true,\n    omitResult : true\n  });\n\n  // Create a Service client\n  this.serviceClient = new Service({\n    ros: options.ros,\n    name: this.repubServiceName,\n    serviceType: 'tf2_web_republisher/RepublishTFs'\n  });\n}\n\n/**\n * Process the incoming TF message and send them out using the callback\n * functions.\n *\n * @param tf - the TF message from the server\n */\nTFClient.prototype.processTFArray = function(tf) {\n  var that = this;\n  tf.transforms.forEach(function(transform) {\n    var frameID = transform.child_frame_id;\n    if (frameID[0] === '/')\n    {\n      frameID = frameID.substring(1);\n    }\n    var info = this.frameInfos[frameID];\n    if (info) {\n      info.transform = new Transform({\n        translation : transform.transform.translation,\n        rotation : transform.transform.rotation\n      });\n      info.cbs.forEach(function(cb) {\n        cb(info.transform);\n      });\n    }\n  }, this);\n};\n\n/**\n * Create and send a new goal (or service request) to the tf2_web_republisher\n * based on the current list of TFs.\n */\nTFClient.prototype.updateGoal = function() {\n  var goalMessage = {\n    source_frames : Object.keys(this.frameInfos),\n    target_frame : this.fixedFrame,\n    angular_thres : this.angularThres,\n    trans_thres : this.transThres,\n    rate : this.rate\n  };\n\n  // if we're running in groovy compatibility mode (the default)\n  // then use the action interface to tf2_web_republisher\n  if(this.ros.groovyCompatibility) {\n    if (this.currentGoal) {\n      this.currentGoal.cancel();\n    }\n    this.currentGoal = new Goal({\n      actionClient : this.actionClient,\n      goalMessage : goalMessage\n    });\n\n    this.currentGoal.on('feedback', this.processTFArray.bind(this));\n    this.currentGoal.send();\n  }\n  else {\n    // otherwise, use the service interface\n    // The service interface has the same parameters as the action,\n    // plus the timeout\n    goalMessage.timeout = this.topicTimeout;\n    var request = new ServiceRequest(goalMessage);\n\n    this.serviceClient.callService(request, this.processResponse.bind(this));\n  }\n\n  this.republisherUpdateRequested = false;\n};\n\n/**\n * Process the service response and subscribe to the tf republisher\n * topic\n *\n * @param response the service response containing the topic name\n */\nTFClient.prototype.processResponse = function(response) {\n  // Do not setup a topic subscription if already disposed. Prevents a race condition where\n  // The dispose() function is called before the service call receives a response.\n  if (this._isDisposed) {\n    return;\n  }\n\n  // if we subscribed to a topic before, unsubscribe so\n  // the republisher stops publishing it\n  if (this.currentTopic) {\n    this.currentTopic.unsubscribe(this._subscribeCB);\n  }\n\n  this.currentTopic = new Topic({\n    ros: this.ros,\n    name: response.topic_name,\n    messageType: 'tf2_web_republisher/TFArray'\n  });\n  this._subscribeCB = this.processTFArray.bind(this);\n  this.currentTopic.subscribe(this._subscribeCB);\n};\n\n/**\n * Subscribe to the given TF frame.\n *\n * @param frameID - the TF frame to subscribe to\n * @param callback - function with params:\n *   * transform - the transform data\n */\nTFClient.prototype.subscribe = function(frameID, callback) {\n  // remove leading slash, if it's there\n  if (frameID[0] === '/')\n  {\n    frameID = frameID.substring(1);\n  }\n  // if there is no callback registered for the given frame, create emtpy callback list\n  if (!this.frameInfos[frameID]) {\n    this.frameInfos[frameID] = {\n      cbs: []\n    };\n    if (!this.republisherUpdateRequested) {\n      setTimeout(this.updateGoal.bind(this), this.updateDelay);\n      this.republisherUpdateRequested = true;\n    }\n  }\n  // if we already have a transform, call back immediately\n  else if (this.frameInfos[frameID].transform) {\n    callback(this.frameInfos[frameID].transform);\n  }\n  this.frameInfos[frameID].cbs.push(callback);\n};\n\n/**\n * Unsubscribe from the given TF frame.\n *\n * @param frameID - the TF frame to unsubscribe from\n * @param callback - the callback function to remove\n */\nTFClient.prototype.unsubscribe = function(frameID, callback) {\n  // remove leading slash, if it's there\n  if (frameID[0] === '/')\n  {\n    frameID = frameID.substring(1);\n  }\n  var info = this.frameInfos[frameID];\n  for (var cbs = info && info.cbs || [], idx = cbs.length; idx--;) {\n    if (cbs[idx] === callback) {\n      cbs.splice(idx, 1);\n    }\n  }\n  if (!callback || cbs.length === 0) {\n    delete this.frameInfos[frameID];\n  }\n};\n\n/**\n * Unsubscribe and unadvertise all topics associated with this TFClient.\n */\nTFClient.prototype.dispose = function() {\n  this._isDisposed = true;\n  this.actionClient.dispose();\n  if (this.currentTopic) {\n    this.currentTopic.unsubscribe(this._subscribeCB);\n  }\n};\n\nmodule.exports = TFClient;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AACvD,IAAIC,IAAI,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAEvC,IAAIE,OAAO,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAC3C,IAAIG,cAAc,GAAGH,OAAO,CAAC,2BAA2B,CAAC;AACzD,IAAII,KAAK,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;AAEvC,IAAIK,SAAS,GAAGL,OAAO,CAAC,mBAAmB,CAAC;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,QAAQ,CAACC,OAAO,EAAE;EACzBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAI,CAACC,GAAG,GAAGD,OAAO,CAACC,GAAG;EACtB,IAAI,CAACC,UAAU,GAAGF,OAAO,CAACE,UAAU,IAAI,YAAY;EACpD,IAAI,CAACC,YAAY,GAAGH,OAAO,CAACG,YAAY,IAAI,GAAG;EAC/C,IAAI,CAACC,UAAU,GAAGJ,OAAO,CAACI,UAAU,IAAI,IAAI;EAC5C,IAAI,CAACC,IAAI,GAAGL,OAAO,CAACK,IAAI,IAAI,IAAI;EAChC,IAAI,CAACC,WAAW,GAAGN,OAAO,CAACM,WAAW,IAAI,EAAE;EAC5C,IAAIC,OAAO,GAAGP,OAAO,CAACQ,YAAY,IAAI,GAAG;EACzC,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC;EAC9B,IAAIK,KAAK,GAAGF,IAAI,CAACC,KAAK,CAAC,CAACJ,OAAO,GAAGE,IAAI,IAAI,UAAU,CAAC;EACrD,IAAI,CAACD,YAAY,GAAG;IAClBC,IAAI,EAAEA,IAAI;IACVG,KAAK,EAAEA;EACT,CAAC;EACD,IAAI,CAACC,UAAU,GAAGb,OAAO,CAACa,UAAU,IAAI,sBAAsB;EAC9D,IAAI,CAACC,gBAAgB,GAAGd,OAAO,CAACc,gBAAgB,IAAI,gBAAgB;EAEpE,IAAI,CAACC,WAAW,GAAG,KAAK;EACxB,IAAI,CAACC,YAAY,GAAG,KAAK;EACzB,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;EACpB,IAAI,CAACC,0BAA0B,GAAG,KAAK;EACvC,IAAI,CAACC,YAAY,GAAG,IAAI;EACxB,IAAI,CAACC,WAAW,GAAG,KAAK;;EAExB;EACA,IAAI,CAACC,YAAY,GAAG,IAAI7B,YAAY,CAAC;IACnCS,GAAG,EAAGD,OAAO,CAACC,GAAG;IACjBY,UAAU,EAAG,IAAI,CAACA,UAAU;IAC5BS,UAAU,EAAG,0CAA0C;IACvDC,UAAU,EAAG,IAAI;IACjBC,UAAU,EAAG;EACf,CAAC,CAAC;;EAEF;EACA,IAAI,CAACC,aAAa,GAAG,IAAI9B,OAAO,CAAC;IAC/BM,GAAG,EAAED,OAAO,CAACC,GAAG;IAChByB,IAAI,EAAE,IAAI,CAACZ,gBAAgB;IAC3Ba,WAAW,EAAE;EACf,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA5B,QAAQ,CAAC6B,SAAS,CAACC,cAAc,GAAG,UAASC,EAAE,EAAE;EAC/C,IAAIC,IAAI,GAAG,IAAI;EACfD,EAAE,CAACE,UAAU,CAACC,OAAO,CAAC,UAASC,SAAS,EAAE;IACxC,IAAIC,OAAO,GAAGD,SAAS,CAACE,cAAc;IACtC,IAAID,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EACtB;MACEA,OAAO,GAAGA,OAAO,CAACE,SAAS,CAAC,CAAC,CAAC;IAChC;IACA,IAAIC,IAAI,GAAG,IAAI,CAACrB,UAAU,CAACkB,OAAO,CAAC;IACnC,IAAIG,IAAI,EAAE;MACRA,IAAI,CAACJ,SAAS,GAAG,IAAIpC,SAAS,CAAC;QAC7ByC,WAAW,EAAGL,SAAS,CAACA,SAAS,CAACK,WAAW;QAC7CC,QAAQ,EAAGN,SAAS,CAACA,SAAS,CAACM;MACjC,CAAC,CAAC;MACFF,IAAI,CAACG,GAAG,CAACR,OAAO,CAAC,UAASS,EAAE,EAAE;QAC5BA,EAAE,CAACJ,IAAI,CAACJ,SAAS,CAAC;MACpB,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,IAAI,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACAnC,QAAQ,CAAC6B,SAAS,CAACe,UAAU,GAAG,YAAW;EACzC,IAAIC,WAAW,GAAG;IAChBC,aAAa,EAAGC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC9B,UAAU,CAAC;IAC5C+B,YAAY,EAAG,IAAI,CAAC9C,UAAU;IAC9B+C,aAAa,EAAG,IAAI,CAAC9C,YAAY;IACjC+C,WAAW,EAAG,IAAI,CAAC9C,UAAU;IAC7BC,IAAI,EAAG,IAAI,CAACA;EACd,CAAC;;EAED;EACA;EACA,IAAG,IAAI,CAACJ,GAAG,CAACkD,mBAAmB,EAAE;IAC/B,IAAI,IAAI,CAACpC,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACqC,MAAM,EAAE;IAC3B;IACA,IAAI,CAACrC,WAAW,GAAG,IAAIrB,IAAI,CAAC;MAC1B2B,YAAY,EAAG,IAAI,CAACA,YAAY;MAChCuB,WAAW,EAAGA;IAChB,CAAC,CAAC;IAEF,IAAI,CAAC7B,WAAW,CAACsC,EAAE,CAAC,UAAU,EAAE,IAAI,CAACxB,cAAc,CAACyB,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/D,IAAI,CAACvC,WAAW,CAACwC,IAAI,EAAE;EACzB,CAAC,MACI;IACH;IACA;IACA;IACAX,WAAW,CAACY,OAAO,GAAG,IAAI,CAAChD,YAAY;IACvC,IAAIiD,OAAO,GAAG,IAAI7D,cAAc,CAACgD,WAAW,CAAC;IAE7C,IAAI,CAACnB,aAAa,CAACiC,WAAW,CAACD,OAAO,EAAE,IAAI,CAACE,eAAe,CAACL,IAAI,CAAC,IAAI,CAAC,CAAC;EAC1E;EAEA,IAAI,CAACpC,0BAA0B,GAAG,KAAK;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAnB,QAAQ,CAAC6B,SAAS,CAAC+B,eAAe,GAAG,UAASC,QAAQ,EAAE;EACtD;EACA;EACA,IAAI,IAAI,CAACxC,WAAW,EAAE;IACpB;EACF;;EAEA;EACA;EACA,IAAI,IAAI,CAACJ,YAAY,EAAE;IACrB,IAAI,CAACA,YAAY,CAAC6C,WAAW,CAAC,IAAI,CAAC1C,YAAY,CAAC;EAClD;EAEA,IAAI,CAACH,YAAY,GAAG,IAAInB,KAAK,CAAC;IAC5BI,GAAG,EAAE,IAAI,CAACA,GAAG;IACbyB,IAAI,EAAEkC,QAAQ,CAACE,UAAU;IACzBC,WAAW,EAAE;EACf,CAAC,CAAC;EACF,IAAI,CAAC5C,YAAY,GAAG,IAAI,CAACU,cAAc,CAACyB,IAAI,CAAC,IAAI,CAAC;EAClD,IAAI,CAACtC,YAAY,CAACgD,SAAS,CAAC,IAAI,CAAC7C,YAAY,CAAC;AAChD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACApB,QAAQ,CAAC6B,SAAS,CAACoC,SAAS,GAAG,UAAS7B,OAAO,EAAE8B,QAAQ,EAAE;EACzD;EACA,IAAI9B,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EACtB;IACEA,OAAO,GAAGA,OAAO,CAACE,SAAS,CAAC,CAAC,CAAC;EAChC;EACA;EACA,IAAI,CAAC,IAAI,CAACpB,UAAU,CAACkB,OAAO,CAAC,EAAE;IAC7B,IAAI,CAAClB,UAAU,CAACkB,OAAO,CAAC,GAAG;MACzBM,GAAG,EAAE;IACP,CAAC;IACD,IAAI,CAAC,IAAI,CAACvB,0BAA0B,EAAE;MACpCgD,UAAU,CAAC,IAAI,CAACvB,UAAU,CAACW,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAChD,WAAW,CAAC;MACxD,IAAI,CAACY,0BAA0B,GAAG,IAAI;IACxC;EACF;EACA;EAAA,KACK,IAAI,IAAI,CAACD,UAAU,CAACkB,OAAO,CAAC,CAACD,SAAS,EAAE;IAC3C+B,QAAQ,CAAC,IAAI,CAAChD,UAAU,CAACkB,OAAO,CAAC,CAACD,SAAS,CAAC;EAC9C;EACA,IAAI,CAACjB,UAAU,CAACkB,OAAO,CAAC,CAACM,GAAG,CAAC0B,IAAI,CAACF,QAAQ,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAlE,QAAQ,CAAC6B,SAAS,CAACiC,WAAW,GAAG,UAAS1B,OAAO,EAAE8B,QAAQ,EAAE;EAC3D;EACA,IAAI9B,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EACtB;IACEA,OAAO,GAAGA,OAAO,CAACE,SAAS,CAAC,CAAC,CAAC;EAChC;EACA,IAAIC,IAAI,GAAG,IAAI,CAACrB,UAAU,CAACkB,OAAO,CAAC;EACnC,KAAK,IAAIM,GAAG,GAAGH,IAAI,IAAIA,IAAI,CAACG,GAAG,IAAI,EAAE,EAAE2B,GAAG,GAAG3B,GAAG,CAAC4B,MAAM,EAAED,GAAG,EAAE,GAAG;IAC/D,IAAI3B,GAAG,CAAC2B,GAAG,CAAC,KAAKH,QAAQ,EAAE;MACzBxB,GAAG,CAAC6B,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IACpB;EACF;EACA,IAAI,CAACH,QAAQ,IAAIxB,GAAG,CAAC4B,MAAM,KAAK,CAAC,EAAE;IACjC,OAAO,IAAI,CAACpD,UAAU,CAACkB,OAAO,CAAC;EACjC;AACF,CAAC;;AAED;AACA;AACA;AACApC,QAAQ,CAAC6B,SAAS,CAAC2C,OAAO,GAAG,YAAW;EACtC,IAAI,CAACnD,WAAW,GAAG,IAAI;EACvB,IAAI,CAACC,YAAY,CAACkD,OAAO,EAAE;EAC3B,IAAI,IAAI,CAACvD,YAAY,EAAE;IACrB,IAAI,CAACA,YAAY,CAAC6C,WAAW,CAAC,IAAI,CAAC1C,YAAY,CAAC;EAClD;AACF,CAAC;AAEDqD,MAAM,CAACC,OAAO,GAAG1E,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}