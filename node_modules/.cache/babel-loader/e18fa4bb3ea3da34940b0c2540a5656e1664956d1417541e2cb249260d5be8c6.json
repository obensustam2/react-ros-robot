{"ast":null,"code":"/**\n * @fileOverview\n * @author Justin Young - justin@oodar.com.au\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar Topic = require('../core/Topic');\nvar Message = require('../core/Message');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * An actionlib action listener\n *\n * Emits the following events:\n *  * 'status' - the status messages received from the action server\n *  * 'feedback' -  the feedback messages received from the action server\n *  * 'result' - the result returned from the action server\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName - the action server name, like /fibonacci\n *   * actionName - the action message name, like 'actionlib_tutorials/FibonacciAction'\n */\nfunction ActionListener(options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  this.serverName = options.serverName;\n  this.actionName = options.actionName;\n  this.timeout = options.timeout;\n  this.omitFeedback = options.omitFeedback;\n  this.omitStatus = options.omitStatus;\n  this.omitResult = options.omitResult;\n\n  // create the topics associated with actionlib\n  var goalListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/goal',\n    messageType: this.actionName + 'Goal'\n  });\n  var feedbackListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/feedback',\n    messageType: this.actionName + 'Feedback'\n  });\n  var statusListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/status',\n    messageType: 'actionlib_msgs/GoalStatusArray'\n  });\n  var resultListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/result',\n    messageType: this.actionName + 'Result'\n  });\n  goalListener.subscribe(function (goalMessage) {\n    that.emit('goal', goalMessage);\n  });\n  statusListener.subscribe(function (statusMessage) {\n    statusMessage.status_list.forEach(function (status) {\n      that.emit('status', status);\n    });\n  });\n  feedbackListener.subscribe(function (feedbackMessage) {\n    that.emit('status', feedbackMessage.status);\n    that.emit('feedback', feedbackMessage.feedback);\n  });\n\n  // subscribe to the result topic\n  resultListener.subscribe(function (resultMessage) {\n    that.emit('status', resultMessage.status);\n    that.emit('result', resultMessage.result);\n  });\n}\nActionListener.prototype.__proto__ = EventEmitter2.prototype;\nmodule.exports = ActionListener;","map":{"version":3,"names":["Topic","require","Message","EventEmitter2","ActionListener","options","that","ros","serverName","actionName","timeout","omitFeedback","omitStatus","omitResult","goalListener","name","messageType","feedbackListener","statusListener","resultListener","subscribe","goalMessage","emit","statusMessage","status_list","forEach","status","feedbackMessage","feedback","resultMessage","result","prototype","__proto__","module","exports"],"sources":["/home/oben-n/react-ros-robot/node_modules/roslib/src/actionlib/ActionListener.js"],"sourcesContent":["/**\n * @fileOverview\n * @author Justin Young - justin@oodar.com.au\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar Topic = require('../core/Topic');\nvar Message = require('../core/Message');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * An actionlib action listener\n *\n * Emits the following events:\n *  * 'status' - the status messages received from the action server\n *  * 'feedback' -  the feedback messages received from the action server\n *  * 'result' - the result returned from the action server\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName - the action server name, like /fibonacci\n *   * actionName - the action message name, like 'actionlib_tutorials/FibonacciAction'\n */\nfunction ActionListener(options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  this.serverName = options.serverName;\n  this.actionName = options.actionName;\n  this.timeout = options.timeout;\n  this.omitFeedback = options.omitFeedback;\n  this.omitStatus = options.omitStatus;\n  this.omitResult = options.omitResult;\n\n\n  // create the topics associated with actionlib\n  var goalListener = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/goal',\n    messageType : this.actionName + 'Goal'\n  });\n\n  var feedbackListener = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/feedback',\n    messageType : this.actionName + 'Feedback'\n  });\n\n  var statusListener = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/status',\n    messageType : 'actionlib_msgs/GoalStatusArray'\n  });\n\n  var resultListener = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/result',\n    messageType : this.actionName + 'Result'\n  });\n\n  goalListener.subscribe(function(goalMessage) {\n      that.emit('goal', goalMessage);\n  });\n\n  statusListener.subscribe(function(statusMessage) {\n      statusMessage.status_list.forEach(function(status) {\n          that.emit('status', status);\n      });\n  });\n\n  feedbackListener.subscribe(function(feedbackMessage) {\n      that.emit('status', feedbackMessage.status);\n      that.emit('feedback', feedbackMessage.feedback);\n  });\n\n  // subscribe to the result topic\n  resultListener.subscribe(function(resultMessage) {\n      that.emit('status', resultMessage.status);\n      that.emit('result', resultMessage.result);\n  });\n\n}\n\nActionListener.prototype.__proto__ = EventEmitter2.prototype;\n\nmodule.exports = ActionListener;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}