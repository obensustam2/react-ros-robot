{"ast":null,"code":"/**\n * @fileOverview\n * @author Graeme Yeates - github.com/megawac\n */\n\n'use strict';\n\nvar Canvas = require('canvas');\nvar Image = Canvas.Image || window.Image;\n\n/**\n * If a message was compressed as a PNG image (a compression hack since\n * gzipping over WebSockets * is not supported yet), this function places the\n * \"image\" in a canvas element then decodes the * \"image\" as a Base64 string.\n *\n * @private\n * @param data - object containing the PNG data.\n * @param callback - function with params:\n *   * data - the uncompressed data\n */\nfunction decompressPng(data, callback) {\n  // Uncompresses the data before sending it through (use image/canvas to do so).\n  var image = new Image();\n  // When the image loads, extracts the raw data (JSON message).\n  image.onload = function () {\n    // Creates a local canvas to draw on.\n    var canvas = new Canvas();\n    var context = canvas.getContext('2d');\n\n    // Sets width and height.\n    canvas.width = image.width;\n    canvas.height = image.height;\n\n    // Prevents anti-aliasing and loosing data\n    context.imageSmoothingEnabled = false;\n    context.webkitImageSmoothingEnabled = false;\n    context.mozImageSmoothingEnabled = false;\n\n    // Puts the data into the image.\n    context.drawImage(image, 0, 0);\n    // Grabs the raw, uncompressed data.\n    var imageData = context.getImageData(0, 0, image.width, image.height).data;\n\n    // Constructs the JSON.\n    var jsonData = '';\n    for (var i = 0; i < imageData.length; i += 4) {\n      // RGB\n      jsonData += String.fromCharCode(imageData[i], imageData[i + 1], imageData[i + 2]);\n    }\n    callback(JSON.parse(jsonData));\n  };\n  // Sends the image data to load.\n  image.src = 'data:image/png;base64,' + data;\n}\nmodule.exports = decompressPng;","map":{"version":3,"names":["Canvas","require","Image","window","decompressPng","data","callback","image","onload","canvas","context","getContext","width","height","imageSmoothingEnabled","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","drawImage","imageData","getImageData","jsonData","i","length","String","fromCharCode","JSON","parse","src","module","exports"],"sources":["/home/oben-n/react-ros-robot/node_modules/roslib/src/util/shim/decompressPng.js"],"sourcesContent":["/**\n * @fileOverview\n * @author Graeme Yeates - github.com/megawac\n */\n\n'use strict';\n\nvar Canvas = require('canvas');\nvar Image = Canvas.Image || window.Image;\n\n/**\n * If a message was compressed as a PNG image (a compression hack since\n * gzipping over WebSockets * is not supported yet), this function places the\n * \"image\" in a canvas element then decodes the * \"image\" as a Base64 string.\n *\n * @private\n * @param data - object containing the PNG data.\n * @param callback - function with params:\n *   * data - the uncompressed data\n */\nfunction decompressPng(data, callback) {\n  // Uncompresses the data before sending it through (use image/canvas to do so).\n  var image = new Image();\n  // When the image loads, extracts the raw data (JSON message).\n  image.onload = function() {\n    // Creates a local canvas to draw on.\n    var canvas = new Canvas();\n    var context = canvas.getContext('2d');\n\n    // Sets width and height.\n    canvas.width = image.width;\n    canvas.height = image.height;\n\n    // Prevents anti-aliasing and loosing data\n    context.imageSmoothingEnabled = false;\n    context.webkitImageSmoothingEnabled = false;\n    context.mozImageSmoothingEnabled = false;\n\n    // Puts the data into the image.\n    context.drawImage(image, 0, 0);\n    // Grabs the raw, uncompressed data.\n    var imageData = context.getImageData(0, 0, image.width, image.height).data;\n\n    // Constructs the JSON.\n    var jsonData = '';\n    for (var i = 0; i < imageData.length; i += 4) {\n      // RGB\n      jsonData += String.fromCharCode(imageData[i], imageData[i + 1], imageData[i + 2]);\n    }\n    callback(JSON.parse(jsonData));\n  };\n  // Sends the image data to load.\n  image.src = 'data:image/png;base64,' + data;\n}\n\nmodule.exports = decompressPng;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIC,KAAK,GAAGF,MAAM,CAACE,KAAK,IAAIC,MAAM,CAACD,KAAK;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,aAAa,CAACC,IAAI,EAAEC,QAAQ,EAAE;EACrC;EACA,IAAIC,KAAK,GAAG,IAAIL,KAAK,EAAE;EACvB;EACAK,KAAK,CAACC,MAAM,GAAG,YAAW;IACxB;IACA,IAAIC,MAAM,GAAG,IAAIT,MAAM,EAAE;IACzB,IAAIU,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;IAErC;IACAF,MAAM,CAACG,KAAK,GAAGL,KAAK,CAACK,KAAK;IAC1BH,MAAM,CAACI,MAAM,GAAGN,KAAK,CAACM,MAAM;;IAE5B;IACAH,OAAO,CAACI,qBAAqB,GAAG,KAAK;IACrCJ,OAAO,CAACK,2BAA2B,GAAG,KAAK;IAC3CL,OAAO,CAACM,wBAAwB,GAAG,KAAK;;IAExC;IACAN,OAAO,CAACO,SAAS,CAACV,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;IAC9B;IACA,IAAIW,SAAS,GAAGR,OAAO,CAACS,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEZ,KAAK,CAACK,KAAK,EAAEL,KAAK,CAACM,MAAM,CAAC,CAACR,IAAI;;IAE1E;IACA,IAAIe,QAAQ,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,CAACI,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MAC5C;MACAD,QAAQ,IAAIG,MAAM,CAACC,YAAY,CAACN,SAAS,CAACG,CAAC,CAAC,EAAEH,SAAS,CAACG,CAAC,GAAG,CAAC,CAAC,EAAEH,SAAS,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC;IACnF;IACAf,QAAQ,CAACmB,IAAI,CAACC,KAAK,CAACN,QAAQ,CAAC,CAAC;EAChC,CAAC;EACD;EACAb,KAAK,CAACoB,GAAG,GAAG,wBAAwB,GAAGtB,IAAI;AAC7C;AAEAuB,MAAM,CAACC,OAAO,GAAGzB,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}