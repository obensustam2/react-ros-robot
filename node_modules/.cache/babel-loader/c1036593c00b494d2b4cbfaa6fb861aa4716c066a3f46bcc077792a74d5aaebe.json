{"ast":null,"code":"/**\n * Socket event handling utilities for handling events on either\n * WebSocket and TCP sockets\n *\n * Note to anyone reviewing this code: these functions are called\n * in the context of their parent object, unless bound\n * @fileOverview\n */\n'use strict';\n\nvar decompressPng = require('../util/decompressPng');\nvar CBOR = require('cbor-js');\nvar typedArrayTagger = require('../util/cborTypedArrayTags');\nvar BSON = null;\nif (typeof bson !== 'undefined') {\n  BSON = bson().BSON;\n}\n\n/**\n * Events listeners for a WebSocket or TCP socket to a JavaScript\n * ROS Client. Sets up Messages for a given topic to trigger an\n * event on the ROS client.\n *\n * @namespace SocketAdapter\n * @private\n */\nfunction SocketAdapter(client) {\n  var decoder = null;\n  if (client.transportOptions.decoder) {\n    decoder = client.transportOptions.decoder;\n  }\n  function handleMessage(message) {\n    if (message.op === 'publish') {\n      client.emit(message.topic, message.msg);\n    } else if (message.op === 'service_response') {\n      client.emit(message.id, message);\n    } else if (message.op === 'call_service') {\n      client.emit(message.service, message);\n    } else if (message.op === 'status') {\n      if (message.id) {\n        client.emit('status:' + message.id, message);\n      } else {\n        client.emit('status', message);\n      }\n    }\n  }\n  function handlePng(message, callback) {\n    if (message.op === 'png') {\n      decompressPng(message.data, callback);\n    } else {\n      callback(message);\n    }\n  }\n  function decodeBSON(data, callback) {\n    if (!BSON) {\n      throw 'Cannot process BSON encoded message without BSON header.';\n    }\n    var reader = new FileReader();\n    reader.onload = function () {\n      var uint8Array = new Uint8Array(this.result);\n      var msg = BSON.deserialize(uint8Array);\n      callback(msg);\n    };\n    reader.readAsArrayBuffer(data);\n  }\n  return {\n    /**\n     * Emits a 'connection' event on WebSocket connection.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onopen: function onOpen(event) {\n      client.isConnected = true;\n      client.emit('connection', event);\n    },\n    /**\n     * Emits a 'close' event on WebSocket disconnection.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onclose: function onClose(event) {\n      client.isConnected = false;\n      client.emit('close', event);\n    },\n    /**\n     * Emits an 'error' event whenever there was an error.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onerror: function onError(event) {\n      client.emit('error', event);\n    },\n    /**\n     * Parses message responses from rosbridge and sends to the appropriate\n     * topic, service, or param.\n     *\n     * @param message - the raw JSON message from rosbridge.\n     * @memberof SocketAdapter\n     */\n    onmessage: function onMessage(data) {\n      if (decoder) {\n        decoder(data.data, function (message) {\n          handleMessage(message);\n        });\n      } else if (typeof Blob !== 'undefined' && data.data instanceof Blob) {\n        decodeBSON(data.data, function (message) {\n          handlePng(message, handleMessage);\n        });\n      } else if (data.data instanceof ArrayBuffer) {\n        var decoded = CBOR.decode(data.data, typedArrayTagger);\n        handleMessage(decoded);\n      } else {\n        var message = JSON.parse(typeof data === 'string' ? data : data.data);\n        handlePng(message, handleMessage);\n      }\n    }\n  };\n}\nmodule.exports = SocketAdapter;","map":{"version":3,"names":["decompressPng","require","CBOR","typedArrayTagger","BSON","bson","SocketAdapter","client","decoder","transportOptions","handleMessage","message","op","emit","topic","msg","id","service","handlePng","callback","data","decodeBSON","reader","FileReader","onload","uint8Array","Uint8Array","result","deserialize","readAsArrayBuffer","onopen","onOpen","event","isConnected","onclose","onClose","onerror","onError","onmessage","onMessage","Blob","ArrayBuffer","decoded","decode","JSON","parse","module","exports"],"sources":["/home/oben-n/react-ros-robot/node_modules/roslib/src/core/SocketAdapter.js"],"sourcesContent":["/**\n * Socket event handling utilities for handling events on either\n * WebSocket and TCP sockets\n *\n * Note to anyone reviewing this code: these functions are called\n * in the context of their parent object, unless bound\n * @fileOverview\n */\n'use strict';\n\nvar decompressPng = require('../util/decompressPng');\nvar CBOR = require('cbor-js');\nvar typedArrayTagger = require('../util/cborTypedArrayTags');\nvar BSON = null;\nif(typeof bson !== 'undefined'){\n    BSON = bson().BSON;\n}\n\n/**\n * Events listeners for a WebSocket or TCP socket to a JavaScript\n * ROS Client. Sets up Messages for a given topic to trigger an\n * event on the ROS client.\n *\n * @namespace SocketAdapter\n * @private\n */\nfunction SocketAdapter(client) {\n\n  var decoder = null;\n  if (client.transportOptions.decoder) {\n    decoder = client.transportOptions.decoder;\n  }\n\n  function handleMessage(message) {\n    if (message.op === 'publish') {\n      client.emit(message.topic, message.msg);\n    } else if (message.op === 'service_response') {\n      client.emit(message.id, message);\n    } else if (message.op === 'call_service') {\n      client.emit(message.service, message);\n    } else if(message.op === 'status'){\n      if(message.id){\n        client.emit('status:'+message.id, message);\n      } else {\n        client.emit('status', message);\n      }\n    }\n  }\n\n  function handlePng(message, callback) {\n    if (message.op === 'png') {\n      decompressPng(message.data, callback);\n    } else {\n      callback(message);\n    }\n  }\n\n  function decodeBSON(data, callback) {\n    if (!BSON) {\n      throw 'Cannot process BSON encoded message without BSON header.';\n    }\n    var reader = new FileReader();\n    reader.onload  = function() {\n      var uint8Array = new Uint8Array(this.result);\n      var msg = BSON.deserialize(uint8Array);\n      callback(msg);\n    };\n    reader.readAsArrayBuffer(data);\n  }\n\n  return {\n    /**\n     * Emits a 'connection' event on WebSocket connection.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onopen: function onOpen(event) {\n      client.isConnected = true;\n      client.emit('connection', event);\n    },\n\n    /**\n     * Emits a 'close' event on WebSocket disconnection.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onclose: function onClose(event) {\n      client.isConnected = false;\n      client.emit('close', event);\n    },\n\n    /**\n     * Emits an 'error' event whenever there was an error.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onerror: function onError(event) {\n      client.emit('error', event);\n    },\n\n    /**\n     * Parses message responses from rosbridge and sends to the appropriate\n     * topic, service, or param.\n     *\n     * @param message - the raw JSON message from rosbridge.\n     * @memberof SocketAdapter\n     */\n    onmessage: function onMessage(data) {\n      if (decoder) {\n        decoder(data.data, function (message) {\n          handleMessage(message);\n        });\n      } else if (typeof Blob !== 'undefined' && data.data instanceof Blob) {\n        decodeBSON(data.data, function (message) {\n          handlePng(message, handleMessage);\n        });\n      } else if (data.data instanceof ArrayBuffer) {\n        var decoded = CBOR.decode(data.data, typedArrayTagger);\n        handleMessage(decoded);\n      } else {\n        var message = JSON.parse(typeof data === 'string' ? data : data.data);\n        handlePng(message, handleMessage);\n      }\n    }\n  };\n}\n\nmodule.exports = SocketAdapter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}