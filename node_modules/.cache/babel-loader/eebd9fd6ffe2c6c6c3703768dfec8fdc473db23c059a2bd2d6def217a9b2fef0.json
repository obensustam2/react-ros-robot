{"ast":null,"code":"var _jsxFileName = \"/home/oben-n/react-ros-robot/src/components/Connection.jsx\";\nimport React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Connection extends Component {\n  constructor() {\n    super();\n    this.state = {\n      connected: false\n    };\n    this.init_connection();\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // window must be used because package is called from index.html\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection closed!\");\n      this.setState({\n        connected: false\n      });\n      // try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        className: \"text-center m-3\",\n        variant: this.state.connected ? \"success\" : \"danger\",\n        children: this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Connection;","map":{"version":3,"names":["React","Component","Alert","Config","Connection","constructor","state","connected","init_connection","ros","window","ROSLIB","Ros","console","log","on","setState","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","render"],"sources":["/home/oben-n/react-ros-robot/src/components/Connection.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\"\nimport Config from \"../scripts/config.js\"\n\n\nclass Connection extends Component {\n    state = {connected: false};\n\n    constructor() {\n        super();\n        this.init_connection();\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros(); // window must be used because package is called from index.html\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established!\");\n            this.setState({connected: true});\n        }); \n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({connected: false});\n            // try to reconnect every 3 seconds\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" + \n                        Config.ROSBRIDGE_SERVER_IP + \n                        \":\" +  \n                        Config.ROSBRIDGE_SERVER_PORT +\n                        \"\"\n                    );\n                } catch (error) {\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n        });\n\n    try {\n        this.state.ros.connect(\n            \"ws://\" + \n            Config.ROSBRIDGE_SERVER_IP + \n            \":\" +  \n            Config.ROSBRIDGE_SERVER_PORT +\n            \"\"\n        );\n    } catch (error) {\n        console.log(\"connection problem\");\n    }\n    }\n    \n\n    render() {\n        return (\n            <div>\n                <Alert className=\"text-center m-3\" variant={this.state.connected? \"success\": \"danger\"}>\n                    {this.state.connected? \"Robot Connected\": \"Robot Disconnected\"}</Alert>\n            </div>\n        );\n\n    }\n}\n\nexport default Connection;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,MAAM,MAAM,sBAAsB;AAAA;AAGzC,MAAMC,UAAU,SAASH,SAAS,CAAC;EAG/BI,WAAW,GAAG;IACV,KAAK,EAAE;IAAC,KAHZC,KAAK,GAAG;MAACC,SAAS,EAAE;IAAK,CAAC;IAItB,IAAI,CAACC,eAAe,EAAE;EAC1B;EAEAA,eAAe,GAAE;IACb,IAAI,CAACF,KAAK,CAACG,GAAG,GAAG,IAAIC,MAAM,CAACC,MAAM,CAACC,GAAG,EAAE,CAAC,CAAC;IAC1CC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,KAAK,CAACG,GAAG,CAAC;IAE3B,IAAI,CAACH,KAAK,CAACG,GAAG,CAACM,EAAE,CAAC,YAAY,EAAE,MAAM;MAClCF,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC,IAAI,CAACE,QAAQ,CAAC;QAACT,SAAS,EAAE;MAAI,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI,CAACD,KAAK,CAACG,GAAG,CAACM,EAAE,CAAC,OAAO,EAAE,MAAM;MAC7BF,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,IAAI,CAACE,QAAQ,CAAC;QAACT,SAAS,EAAE;MAAK,CAAC,CAAC;MACjC;MACAU,UAAU,CAAC,MAAM;QACb,IAAI;UACA,IAAI,CAACX,KAAK,CAACG,GAAG,CAACS,OAAO,CAClB,OAAO,GACPf,MAAM,CAACgB,mBAAmB,GAC1B,GAAG,GACHhB,MAAM,CAACiB,qBAAqB,GAC5B,EAAE,CACL;QACL,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZR,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACrC;MACJ,CAAC,EAAEX,MAAM,CAACmB,kBAAkB,CAAC;IACjC,CAAC,CAAC;IAEN,IAAI;MACA,IAAI,CAAChB,KAAK,CAACG,GAAG,CAACS,OAAO,CAClB,OAAO,GACPf,MAAM,CAACgB,mBAAmB,GAC1B,GAAG,GACHhB,MAAM,CAACiB,qBAAqB,GAC5B,EAAE,CACL;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZR,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACrC;EACA;EAGAS,MAAM,GAAG;IACL,oBACI;MAAA,uBACI,QAAC,KAAK;QAAC,SAAS,EAAC,iBAAiB;QAAC,OAAO,EAAE,IAAI,CAACjB,KAAK,CAACC,SAAS,GAAE,SAAS,GAAE,QAAS;QAAA,UACjF,IAAI,CAACD,KAAK,CAACC,SAAS,GAAE,iBAAiB,GAAE;MAAoB;QAAA;QAAA;QAAA;MAAA;IAAS;MAAA;MAAA;MAAA;IAAA,QACzE;EAGd;AACJ;AAEA,eAAeH,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}