{"ast":null,"code":"var _jsxFileName = \"/home/oben-n/react-ros-robot/src/components/RobotState.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport Config from \"../scripts/config.js\";\nimport * as Three from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RobotState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      x: 0,\n      y: 0,\n      orientation: 0,\n      linear_verlocity: 0,\n      angular_velocity: 0\n    };\n    this.init_connection();\n  }\n  getRobotState() {\n    // create pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/amcl_pose\",\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\"\n    });\n\n    // create pose callback\n    pose_subscriber.subscribe(message => {\n      this.setState({\n        x: message.pose.pose.position.x.toFixed(2)\n      });\n      this.setState({\n        y: message.pose.pose.position.y.toFixed(2)\n      });\n    });\n\n    // // create velocity subcriber\n    // velocity_subscriber = new window.ROSLIB.Topic({\n    //         ros:this.state.ros,\n    //         name: \"/odometry\",\n    //         messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n    // });\n  }\n\n  getOrientataionFromQuaternion(ros_orientation_quaternion) {\n    var q = Three.Quaternion(ros_orientation_quaternion.x, ros_orientation_quaternion.y, ros_orientation_quaternion.z, ros_orientation_quaternion.w);\n\n    //convert this quaternion to roll/pitch/yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // window must be used because package is called from index.html\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleop\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"here\");\n      console.log(\"connection closed!\");\n      this.setState({\n        connected: false\n      });\n\n      // try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n  componentDidMount() {\n    this.getRobotState();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mt-4\",\n            children: \"Position\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"X: \", this.state.x]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Y: \", this.state.y]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Orientation: \", this.state.orientation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mt-4\",\n            children: \"Velocity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Linear X: \", this.state.linear_velocity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Angular Z: \", this.state.angular_velocity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default RobotState;","map":{"version":3,"names":["React","Component","Row","Col","Container","Config","Three","RobotState","constructor","state","ros","x","y","orientation","linear_verlocity","angular_velocity","init_connection","getRobotState","pose_subscriber","window","ROSLIB","Topic","name","messageType","subscribe","message","setState","pose","position","toFixed","getOrientataionFromQuaternion","ros_orientation_quaternion","q","Quaternion","z","w","RPY","Euler","setFromQuaternion","Math","PI","Ros","console","log","on","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","render","linear_velocity"],"sources":["/home/oben-n/react-ros-robot/src/components/RobotState.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {Row, Col, Container} from \"react-bootstrap\";\nimport Config from \"../scripts/config.js\";\nimport * as Three from \"three\";\n\nclass RobotState extends Component {\n    state = {\n        ros: null,\n        x:0,\n        y:0,\n        orientation:0,\n        linear_verlocity:0,\n        angular_velocity:0,\n    };\n\n    constructor() {\n        super();\n        this.init_connection();\n    }\n\n    getRobotState(){\n        // create pose subscriber\n        var pose_subscriber = new window.ROSLIB.Topic({\n                ros:this.state.ros,\n                name: \"/amcl_pose\",\n                messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n        });\n\n        // create pose callback\n        pose_subscriber.subscribe((message) => {\n            this.setState({x: message.pose.pose.position.x.toFixed(2)});\n            this.setState({y: message.pose.pose.position.y.toFixed(2)});\n        });\n        \n\n        // // create velocity subcriber\n        // velocity_subscriber = new window.ROSLIB.Topic({\n        //         ros:this.state.ros,\n        //         name: \"/odometry\",\n        //         messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n        // });\n    }\n\n    getOrientataionFromQuaternion(ros_orientation_quaternion){\n        var q = Three.Quaternion(ros_orientation_quaternion.x, \n                                 ros_orientation_quaternion.y, \n                                 ros_orientation_quaternion.z, \n                                 ros_orientation_quaternion.w)\n    \n        //convert this quaternion to roll/pitch/yaw\n        var RPY = new Three.Euler().setFromQuaternion(q);\n        \n        return RPY[\"_z\"] * (180 / Math.PI);\n    };\n\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros(); // window must be used because package is called from index.html\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established in Teleop\");\n            this.setState({connected: true});\n        }); \n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"here\");\n            console.log(\"connection closed!\");\n            this.setState({connected: false});\n\n            // try to reconnect every 3 seconds\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" + \n                        Config.ROSBRIDGE_SERVER_IP + \n                        \":\" +  \n                        Config.ROSBRIDGE_SERVER_PORT +\n                        \"\"\n                    );\n                } catch (error) {\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n        });\n\n        try {\n            this.state.ros.connect(\n                \"ws://\" + \n                Config.ROSBRIDGE_SERVER_IP + \n                \":\" +  \n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            );\n        } catch (error) {\n            console.log(\"connection problem\");\n        }\n    }\n\n    componentDidMount(){\n        this.getRobotState();\n    }\n\n    render() {\n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <h4 className=\"mt-4\">Position</h4>\n                        <p className=\"mt-0\">X: {this.state.x}</p>\n                        <p className=\"mt-0\">Y: {this.state.y}</p>\n                        <p className=\"mt-0\">Orientation: {this.state.orientation}</p>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col>\n                        <h4 className=\"mt-4\">Velocity</h4>\n                        <p className=\"mt-0\">Linear X: {this.state.linear_velocity}</p>\n                        <p className=\"mt-0\">Angular Z: {this.state.angular_velocity}</p>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default RobotState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}